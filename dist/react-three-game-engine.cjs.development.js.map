{"version":3,"file":"react-three-game-engine.cjs.development.js","sources":["../src/main/worker/shared/types.ts","../src/main/worker/planckjs/config.ts","../src/main/worker/planckjs/bodies.ts","../src/shared/PhysicsProvider.tsx","../src/shared/utils.ts","../src/shared/StoredPhysicsData.tsx","../src/utils/numbers.ts","../src/shared/MeshSubscriptions.tsx","../src/main/hooks/useBody.ts","../src/shared/WorkerOnMessageProvider.tsx","../src/shared/PhysicsSync.tsx","../src/main/hooks/useWorkerMessages.ts","../src/main/PhysicsWorker.tsx","../src/main/R3FPhysicsObjectUpdater.tsx","../src/shared/CollisionsProvider.tsx","../src/main/MeshRefs.tsx","../src/shared/Messages.tsx","../src/shared/types.ts","../src/main/LogicHandler.tsx","../src/shared/SendMessages.tsx","../src/main/LogicWorker.tsx","../src/main/Engine.tsx","../src/logic/workerHelper.ts","../src/logic/logicWorkerApp/PhysicsHandler.tsx","../src/logic/logicWorkerApp/MessageHandler.tsx","../src/logic/ApiWrapper.tsx","../src/logic/logicWorkerApp/hooks/messaging.ts","../src/logic/logicWorkerApp/hooks/sync.ts","../src/main/Body.tsx","../src/main/worker/physicsWorkerHelper.ts","../src/main/hooks/useCollisionEvents.ts"],"sourcesContent":["import { WorldDef } from 'planck-js';\n\nexport enum WorkerMessageType {\n  INIT,\n  STEP,\n  LOGIC_FRAME,\n  ADD_BODY,\n  REMOVE_BODY,\n  SET_BODY,\n  UPDATE_BODY,\n  PHYSICS_STEP_PROCESSED,\n  READY_FOR_PHYSICS,\n}\n\nexport enum WorkerOwnerMessageType {\n  FRAME,\n  PHYSICS_STEP,\n  SYNC_BODIES,\n  BEGIN_COLLISION,\n  END_COLLISION,\n  MESSAGE,\n  INITIATED,\n}\n\nexport type Buffers = {\n  positions: Float32Array;\n  angles: Float32Array;\n};\n\nexport type ValidUUID = string | number;\n\nexport type PhysicsProps = {\n  config?: {\n    maxNumberOfDynamicObjects?: number;\n    updateRate?: number;\n  };\n  worldParams?: WorldDef;\n};\n","export const PHYSICS_UPDATE_RATE = 1000 / 30;\n","import {dynamicBodiesUuids, existingBodies, planckWorld} from \"./shared\";\nimport {Shape} from \"planck-js/lib/shape\";\nimport {activeCollisionListeners} from \"./collisions/data\";\nimport {addCachedBody, getCachedBody} from \"./cache\";\nimport type {BodyDef, FixtureOpt, Body, Joint} from \"planck-js\";\nimport {Box, Circle, DistanceJoint, RopeJoint, Vec2} from \"planck-js\";\nimport {ValidUUID} from \"../shared/types\";\nimport {syncBodies} from \"../shared\";\n\nexport enum BodyType {\n    static = 'static',\n    kinematic = 'kinematic',\n    dynamic = 'dynamic'\n}\n\nexport enum BodyShape {\n    box = 'box',\n    circle = 'circle',\n}\n\nexport type FixtureBase = {\n    shape: BodyShape,\n    fixtureOptions?: Partial<FixtureOpt>,\n}\n\nexport type BoxFixture = FixtureBase & {\n    hx: number,\n    hy: number,\n    center?: [number, number],\n    angle?: number,\n}\n\nexport const createBoxFixture = ({\n                                     width = 1,\n                                     height = 1,\n                                     center,\n                                        angle,\n                                     fixtureOptions = {}\n                                 }: {\n    width?: number,\n    height?: number,\n    angle?: number,\n    center?: [number, number],\n    fixtureOptions?: Partial<FixtureOpt>\n}): BoxFixture => {\n    const fixture: BoxFixture = {\n        shape: BodyShape.box,\n        hx: width,\n        hy: height,\n        fixtureOptions,\n    }\n    if (angle) {\n        fixture.angle = angle\n    }\n    if (center) {\n        fixture.center = center\n    }\n    return fixture\n}\n\nexport type CircleFixture = FixtureBase & {\n    radius: number,\n    position?: [number, number],\n}\n\nexport const createCircleFixture = ({ radius = 1, position, fixtureOptions = {} }: {\n    radius?: number,\n    position?: [number, number],\n    fixtureOptions?: Partial<FixtureOpt>\n}): CircleFixture => {\n    return {\n        shape: BodyShape.circle,\n        radius,\n        position,\n        fixtureOptions,\n    }\n}\n\ntype Fixture = BoxFixture | CircleFixture\n\ntype BasicBodyProps = Partial<BodyDef> & {\n    fixtures?: Fixture[],\n}\n\ntype AddBoxBodyProps = BasicBodyProps & {}\n\ntype AddCircleBodyProps = BasicBodyProps & {}\n\nexport type AddBodyDef = BasicBodyProps | AddBoxBodyProps | AddCircleBodyProps\n\nexport type AddBodyProps = AddBodyDef & {\n    uuid: ValidUUID,\n    listenForCollisions: boolean,\n    cacheKey?: string,\n    attachToRope?: boolean,\n}\n\nexport const addBody = ({uuid, cacheKey, listenForCollisions, fixtures = [], attachToRope = false, ...props}: AddBodyProps) => {\n\n    const existingBody = existingBodies.get(uuid)\n\n    if (existingBody) {\n        return existingBody\n    }\n\n    if (listenForCollisions) {\n        activeCollisionListeners[uuid] = true\n    }\n\n    const bodyDef: BodyDef = {\n        type: BodyType.static,\n        fixedRotation: true,\n        ...props,\n    }\n\n    const {type} = bodyDef\n\n    let body: Body | null = null;\n\n    if (cacheKey) {\n        const cachedBody = getCachedBody(cacheKey)\n        if (cachedBody) {\n\n            if (fixtures && fixtures.length > 0) {\n\n                let bodyFixture = cachedBody.getFixtureList()\n\n                fixtures.forEach((fixture, fixtureIndex) => {\n\n                    let fixtureOptions = fixture.fixtureOptions\n\n                    fixtureOptions = {\n                        userData: {\n                            uuid,\n                            fixtureIndex,\n                            ...fixtureOptions?.userData\n                        },\n                        ...fixtureOptions,\n                    }\n\n                    if (bodyFixture) {\n\n                        if (fixtureOptions) {\n                            bodyFixture.setUserData(fixtureOptions.userData)\n                        }\n\n                        bodyFixture = bodyFixture.getNext()\n                    }\n\n                })\n\n            }\n\n            const {position, angle} = props\n\n            if (position) {\n                cachedBody.setPosition(position)\n            }\n\n            if (angle) {\n                cachedBody.setAngle(angle)\n            }\n\n            cachedBody.setActive(true)\n\n            body = cachedBody\n\n        }\n    }\n\n    if (!body) {\n\n        body = planckWorld.createBody(bodyDef)\n\n        if (fixtures && fixtures.length > 0) {\n\n            fixtures.forEach((fixture, fixtureIndex) => {\n\n                const {shape} = fixture\n\n                let fixtureOptions = fixture.fixtureOptions ?? {}\n\n                fixtureOptions = {\n                    ...fixtureOptions,\n                    userData: {\n                        uuid,\n                        fixtureIndex,\n                        ...fixtureOptions?.userData\n                    },\n                }\n\n                let bodyShape: Shape;\n\n                switch (shape) {\n                    case BodyShape.box:\n                        const {hx, hy, center} = fixture as BoxFixture\n                        bodyShape = Box((hx as number) / 2, (hy as number) / 2, center ? Vec2(center[0], center[1]) : undefined) as unknown as Shape\n                        break;\n                    case BodyShape.circle:\n                        const {radius} = fixture as CircleFixture\n                        bodyShape = Circle((radius as number)) as unknown as Shape\n                        break;\n                    default:\n                        throw new Error(`Unhandled body shape ${shape}`)\n                }\n\n                if (fixtureOptions) {\n                    if (body) {\n                        body.createFixture(bodyShape, fixtureOptions as FixtureOpt)\n                    }\n                } else {\n                    if (body) {\n                        body.createFixture(bodyShape)\n                    }\n                }\n\n                // todo - handle rope properly...\n                if (attachToRope) {\n\n                    const {position, angle} = props\n\n                    const ropeJointDef = {\n                        maxLength: 0.5,\n                        localAnchorA: position,\n                        localAnchorB: position,\n                    };\n\n                    const startingBodyDef: BodyDef = {\n                        type: BodyType.static,\n                        fixedRotation: true,\n                        position,\n                        angle,\n                    }\n\n                    const startingBody = planckWorld.createBody(startingBodyDef)\n\n                    if (body) {\n\n                        const distanceJoint = DistanceJoint({\n                            collideConnected: false,\n                            frequencyHz: 5,\n                            dampingRatio: 0.5,\n                            length: 0.15,\n                        }, startingBody, body, position ?? Vec2(0, 0), position ?? Vec2(0, 0))\n\n                        const rope2 = planckWorld.createJoint(RopeJoint(ropeJointDef, startingBody, body, position ?? Vec2(0, 0)) as unknown as Joint);\n                        const rope = planckWorld.createJoint(distanceJoint as unknown as Joint);\n                    }\n\n\n                }\n\n            })\n\n\n        }\n\n    }\n\n    if (type !== BodyType.static) {\n        dynamicBodiesUuids.push(uuid)\n        syncBodies()\n    }\n\n    if (!body) {\n        throw new Error(`No body`)\n    }\n\n    existingBodies.set(uuid, body)\n\n    return body\n\n}\n\nexport type RemoveBodyProps = {\n    uuid: ValidUUID,\n    cacheKey?: string\n}\n\nconst tempVec = Vec2(0, 0)\n\nexport const removeBody = ({uuid, cacheKey}: RemoveBodyProps) => {\n    const index = dynamicBodiesUuids.indexOf(uuid)\n    if (index > -1) {\n        dynamicBodiesUuids.splice(index, 1)\n        syncBodies()\n    }\n    const body = existingBodies.get(uuid)\n    if (!body) {\n        console.warn(`Body not found for ${uuid}`)\n        return\n    }\n    existingBodies.delete(uuid)\n    if (cacheKey) {\n        tempVec.set(-1000, -1000)\n        body.setPosition(tempVec)\n        tempVec.set(0, 0)\n        body.setLinearVelocity(tempVec)\n        body.setActive(false)\n        addCachedBody(cacheKey, body)\n    } else {\n        planckWorld.destroyBody(body)\n    }\n}\n\nexport type SetBodyProps = {\n    uuid: ValidUUID,\n    method: string,\n    methodParams: any[],\n}\n\nexport const setBody = ({uuid, method, methodParams}: SetBodyProps) => {\n    const body = existingBodies.get(uuid)\n    if (!body) {\n        console.warn(`Body not found for ${uuid}`)\n        return\n    }\n    switch (method) {\n        //case 'setAngle':\n        //    const [angle] = methodParams\n        //    body.setTransform(body.getPosition(), angle)\n        //    break;\n        case 'setLinearVelocity':\n            // console.log('methodParams', methodParams[0].x, methodParams[0].y);\n            (body as any)[method](...methodParams)\n            break;\n        default:\n            (body as any)[method](...methodParams)\n    }\n}\n\nexport type UpdateBodyData = {\n    fixtureUpdate?: {\n        groupIndex?: number,\n        categoryBits?: number,\n        maskBits?: number,\n    }\n}\n\nexport type UpdateBodyProps = {\n    uuid: ValidUUID,\n    data: UpdateBodyData,\n}\n\nexport const updateBody = ({uuid, data}: UpdateBodyProps) => {\n    const body = existingBodies.get(uuid)\n    if (!body) {\n        console.warn(`Body not found for ${uuid}`)\n        return\n    }\n    const {fixtureUpdate} = data\n    if (fixtureUpdate) {\n        const fixture = body.getFixtureList()\n        if (fixture) {\n            const {\n                groupIndex,\n                categoryBits,\n                maskBits\n            } = fixtureUpdate\n            if (\n                groupIndex !== undefined || categoryBits !== undefined || maskBits !== undefined\n            ) {\n                const originalGroupIndex = fixture.getFilterGroupIndex()\n                const originalCategoryBits = fixture.getFilterCategoryBits()\n                const originalMaskBits = fixture.getFilterMaskBits()\n                fixture.setFilterData({\n                    groupIndex: groupIndex !== undefined ? groupIndex : originalGroupIndex,\n                    categoryBits: categoryBits !== undefined ? categoryBits : originalCategoryBits,\n                    maskBits: maskBits !== undefined ? maskBits : originalMaskBits,\n                })\n            }\n        }\n    }\n}\n","import React, {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useState,\n} from 'react';\nimport {\n  AddBodyProps,\n  RemoveBodyProps,\n  SetBodyProps,\n  UpdateBodyProps,\n} from '../main/worker/planckjs/bodies';\nimport { WorkerMessageType } from '../main/worker/shared/types';\n\nexport type ContextState = {\n  workerAddBody: (props: AddBodyProps) => void;\n  workerRemoveBody: (props: RemoveBodyProps) => void;\n  workerSetBody: (props: SetBodyProps) => void;\n  workerUpdateBody: (props: UpdateBodyProps) => void;\n};\n\nexport const Context = createContext((null as unknown) as ContextState);\n\nexport const usePhysicsProvider = (): ContextState => {\n  return useContext(Context);\n};\n\nconst PhysicsProvider: React.FC<{\n  worker: Worker | MessagePort;\n}> = ({ children, worker }) => {\n  const workerAddBody = useCallback((props: AddBodyProps) => {\n    worker.postMessage({\n      type: WorkerMessageType.ADD_BODY,\n      props: props,\n    });\n  }, []);\n\n  const workerRemoveBody = useCallback((props: RemoveBodyProps) => {\n    worker.postMessage({\n      type: WorkerMessageType.REMOVE_BODY,\n      props,\n    });\n  }, []);\n\n  const workerSetBody = useCallback((props: SetBodyProps) => {\n    worker.postMessage({\n      type: WorkerMessageType.SET_BODY,\n      props,\n    });\n  }, []);\n\n  const workerUpdateBody = useCallback((props: UpdateBodyProps) => {\n    worker.postMessage({\n      type: WorkerMessageType.UPDATE_BODY,\n      props,\n    });\n  }, []);\n\n  return (\n    <Context.Provider\n      value={{\n        workerAddBody,\n        workerRemoveBody,\n        workerSetBody,\n        workerUpdateBody,\n      }}\n    >\n      {children}\n    </Context.Provider>\n  );\n};\n\nexport default PhysicsProvider;\n","import { Buffers } from '../main/worker/shared/types';\nimport { Object3D } from 'three';\n\nexport const getPositionAndAngle = (\n  buffers: Buffers,\n  index: number\n): {\n  position: [number, number];\n  angle: number;\n} | null => {\n  if (index !== undefined && buffers.positions.length) {\n    const start = index * 2;\n    const position = (buffers.positions.slice(start, start + 2) as unknown) as [\n      number,\n      number\n    ];\n    return {\n      position,\n      angle: buffers.angles[index],\n    };\n  } else {\n    return null;\n  }\n};\nexport const applyPositionAngle = (\n  buffers: Buffers,\n  object: Object3D | null,\n  index: number,\n  applyAngle: boolean = false\n) => {\n  if (index !== undefined && buffers.positions.length && !!object) {\n    const start = index * 2;\n    const position = buffers.positions.slice(start, start + 2);\n    object.position.x = position[0];\n    object.position.y = position[1];\n    if (applyAngle) {\n      object.rotation.z = buffers.angles[index];\n    }\n  } else {\n    // console.warn('no match?')\n  }\n};\n","import React, { createContext, FC, useContext, useState } from 'react';\n\ntype Bodies = {\n  [uuid: string]: number;\n};\n\ntype ContextState = {\n  data: {\n    bodies: Bodies;\n  };\n};\n\nconst Context = createContext((null as unknown) as ContextState);\n\nexport const useStoredData = () => {\n  return useContext(Context).data;\n};\n\nconst StoredPhysicsData: FC = ({ children }) => {\n  const [data] = useState<{\n    bodies: Bodies;\n  }>({\n    bodies: {},\n  });\n\n  return (\n    <Context.Provider\n      value={{\n        data,\n      }}\n    >\n      {children}\n    </Context.Provider>\n  );\n};\n\nexport default StoredPhysicsData;\n","import { MathUtils } from 'three';\n\nexport const lerp = MathUtils.lerp;\n","import React, {\n    createContext, MutableRefObject,\n    useCallback,\n    useContext,\n    useEffect,\n    useRef,\n    useState,\n} from 'react';\nimport {Object3D} from 'three';\nimport {ValidUUID} from '../main/worker/shared/types';\nimport {getPositionAndAngle} from './utils';\nimport {useStoredData} from './StoredPhysicsData';\nimport {lerp} from '../utils/numbers';\n\nexport type ContextState = {\n    lerpMeshes: (\n        getPhysicsStepTimeRemainingRatio: (time: number) => number\n    ) => void;\n    updateMeshes: (\n        positions: Float32Array,\n        angles: Float32Array,\n        immediate: boolean\n    ) => void;\n    addSubscription: (\n        uuid: ValidUUID,\n        objectRef: MutableRefObject<Object3D>,\n        applyAngle: boolean\n    ) => () => void;\n};\n\nexport const Context = createContext((null as unknown) as ContextState);\n\nexport const useLerpMeshes = () => {\n    return useContext(Context).lerpMeshes;\n};\n\nexport const useAddMeshSubscription = () => {\n    return useContext(Context).addSubscription;\n};\n\nexport const useSubscribeMesh = (\n    uuid: ValidUUID,\n    objectRef: MutableRefObject<Object3D>,\n    applyAngle: boolean = true,\n    isDynamic: boolean = true\n) => {\n    const addSubscription = useContext(Context).addSubscription;\n\n    useEffect(() => {\n        if (!isDynamic) return;\n\n        const unsubscribe = addSubscription(uuid, objectRef, applyAngle);\n\n        return () => {\n            unsubscribe();\n        };\n    }, [uuid, objectRef, applyAngle, isDynamic, addSubscription]);\n};\n\nexport const useUpdateMeshes = () => {\n    return useContext(Context).updateMeshes;\n};\n\nconst MeshSubscriptions: React.FC = ({children}) => {\n    const subscriptionsRef = useRef<{\n        [uuid: string]: {\n            uuid: ValidUUID;\n            objectRef: MutableRefObject<Object3D>;\n            applyAngle: boolean;\n            lastUpdate?: number;\n            target?: {\n                position: [number, number];\n                angle: number;\n            };\n        };\n    }>({});\n\n    const lerpMeshes = useCallback(\n        (getPhysicsStepTimeRemainingRatio: (time: number) => number) => {\n            Object.values(subscriptionsRef.current).forEach(\n                ({uuid, objectRef, target, applyAngle, lastUpdate}) => {\n                    if (!target) return;\n                    const object = objectRef.current\n                    if (!object) return;\n                    const {position, angle} = target;\n                    let physicsRemainingRatio = getPhysicsStepTimeRemainingRatio(\n                        lastUpdate ?? Date.now()\n                    );\n                    object.position.x = lerp(\n                        object.position.x,\n                        position[0],\n                        physicsRemainingRatio\n                    );\n                    object.position.y = lerp(\n                        object.position.y,\n                        position[1],\n                        physicsRemainingRatio\n                    );\n                    if (applyAngle) {\n                        object.rotation.z = angle; // todo - lerp\n                    }\n                    subscriptionsRef.current[uuid as string].lastUpdate = Date.now();\n                }\n            );\n        },\n        [subscriptionsRef]\n    );\n\n    const storedData = useStoredData();\n\n    const updateMeshes = useCallback(\n        (positions: Float32Array, angles: Float32Array, immediate: boolean) => {\n            Object.entries(subscriptionsRef.current).forEach(\n                ([uuid, {objectRef, target, applyAngle}]) => {\n                    const object = objectRef.current\n                    if (!object) return\n                    const index = storedData.bodies[uuid];\n                    const update = getPositionAndAngle({positions, angles}, index);\n                    if (update) {\n                        if (immediate) {\n                            object.position.x = update.position[0];\n                            object.position.y = update.position[1];\n                            if (applyAngle) {\n                                object.rotation.x = update.angle;\n                            }\n                        } else if (target) {\n                            object.position.x = target.position[0];\n                            object.position.y = target.position[1];\n                            if (applyAngle) {\n                                object.rotation.x = target.angle;\n                            }\n                        }\n                        subscriptionsRef.current[uuid].target = {\n                            position: update.position,\n                            angle: update.angle,\n                        };\n                    }\n                }\n            );\n        },\n        [subscriptionsRef, storedData]\n    );\n\n    const addSubscription = useCallback(\n        (uuid: ValidUUID, objectRef: MutableRefObject<Object3D>, applyAngle: boolean) => {\n            subscriptionsRef.current[uuid as string] = {\n                uuid,\n                objectRef,\n                applyAngle,\n            };\n\n            const unsubscribe = () => {\n                delete subscriptionsRef.current[uuid as string];\n            };\n\n            return unsubscribe;\n        },\n        [subscriptionsRef]\n    );\n\n    return (\n        <Context.Provider\n            value={{\n                lerpMeshes,\n                updateMeshes,\n                addSubscription,\n            }}\n        >\n            {children}\n        </Context.Provider>\n    );\n};\n\nexport default MeshSubscriptions;\n","import {\n  AddBodyDef,\n  BodyType,\n  UpdateBodyData,\n} from '../worker/planckjs/bodies';\nimport {\n  MutableRefObject,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { Object3D } from 'three';\nimport { usePhysicsProvider } from '../../shared/PhysicsProvider';\nimport { ValidUUID } from '../worker/shared/types';\nimport { Vec2 } from 'planck-js';\nimport {\n  useAddMeshSubscription,\n  useSubscribeMesh,\n} from '../../shared/MeshSubscriptions';\n\nexport type BodyApi = {\n  applyForceToCenter: (vec: Vec2, uuid?: ValidUUID) => void;\n  applyLinearImpulse: (vec: Vec2, pos: Vec2, uuid?: ValidUUID) => void;\n  setAwake: (flag: boolean, uuid?: ValidUUID) => void;\n  setPosition: (vec: Vec2, uuid?: ValidUUID) => void;\n  setLinearVelocity: (vec: Vec2, uuid?: ValidUUID) => void;\n  setAngle: (angle: number, uuid?: ValidUUID) => void;\n  updateBody: (data: UpdateBodyData, uuid?: ValidUUID) => void;\n};\n\nexport const useBodyApi = (passedUuid: ValidUUID): BodyApi => {\n  const { workerSetBody, workerUpdateBody } = usePhysicsProvider();\n\n  const api = useMemo<BodyApi>(() => {\n    return {\n      applyForceToCenter: (vec, uuid) => {\n        workerSetBody({\n          uuid: uuid ?? passedUuid,\n          method: 'applyForceToCenter',\n          methodParams: [vec, true],\n        });\n      },\n      applyLinearImpulse: (vec, pos, uuid) => {\n        workerSetBody({\n          uuid: uuid ?? passedUuid,\n          method: 'applyLinearImpulse',\n          methodParams: [vec, pos, true],\n        });\n      },\n      setPosition: (vec, uuid) => {\n        workerSetBody({\n          uuid: uuid ?? passedUuid,\n          method: 'setPosition',\n          methodParams: [vec],\n        });\n      },\n      setAwake: (flag, uuid) => {\n        workerSetBody({\n          uuid: uuid ?? passedUuid,\n          method: 'setAwake',\n          methodParams: [flag],\n        });\n      },\n      setLinearVelocity: (vec, uuid) => {\n        workerSetBody({\n          uuid: uuid ?? passedUuid,\n          method: 'setLinearVelocity',\n          methodParams: [vec],\n        });\n      },\n      updateBody: (data: UpdateBodyData, uuid) => {\n        workerUpdateBody({ uuid: uuid ?? passedUuid, data });\n      },\n      setAngle: (angle: number, uuid) => {\n        workerSetBody({\n          uuid: uuid ?? passedUuid,\n          method: 'setAngle',\n          methodParams: [angle],\n        });\n      },\n    };\n  }, [passedUuid]);\n\n  return api;\n};\n\nexport type BodyParams = {\n  syncBody?: boolean,\n  listenForCollisions?: boolean;\n  applyAngle?: boolean;\n  cacheKey?: string;\n  uuid?: ValidUUID;\n  fwdRef?: MutableRefObject<Object3D>;\n};\n\nexport const useBody = (\n  propsFn: () => AddBodyDef,\n  bodyParams: BodyParams = {}\n): [MutableRefObject<Object3D>, BodyApi, ValidUUID] => {\n  const {\n    applyAngle = false,\n    cacheKey,\n    uuid: passedUUID,\n    fwdRef,\n    listenForCollisions = false,\n    syncBody = true,\n  } = bodyParams;\n  const localRef = useRef<Object3D>((null as unknown) as Object3D);\n  const ref = fwdRef ? fwdRef : localRef;\n  const [uuid] = useState(() => {\n    if (passedUUID) return passedUUID;\n    if (!ref.current) {\n      ref.current = new Object3D();\n    }\n    return ref.current.uuid;\n  });\n  const [isDynamic] = useState(() => {\n    const props = propsFn();\n    return props.type !== BodyType.static;\n  });\n  const { workerAddBody, workerRemoveBody } = usePhysicsProvider();\n\n  useLayoutEffect(() => {\n    const props = propsFn();\n\n    if (!ref.current) {\n      ref.current = new Object3D()\n    }\n\n    const object = ref.current;\n\n    if (object) {\n      object.position.x = props.position?.x || 0;\n      object.position.y = props.position?.y || 0;\n    }\n\n    workerAddBody({\n      uuid,\n      listenForCollisions,\n      cacheKey,\n      ...props,\n    });\n\n    return () => {\n      workerRemoveBody({ uuid, cacheKey });\n    };\n  }, []);\n\n  useSubscribeMesh(uuid, ref, applyAngle, syncBody && isDynamic);\n\n  const api = useBodyApi(uuid);\n\n  return [ref, api, uuid];\n};\n","import React, {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\n\nexport type ContextState = {\n  subscribe: (callback: (event: MessageEvent) => void) => () => void;\n};\n\nexport const Context = createContext((null as unknown) as ContextState);\n\nexport const useWorkerOnMessage = () => {\n  return useContext(Context).subscribe;\n};\n\nconst WorkerOnMessageProvider: React.FC<{\n    subscribe: (callback: (event: MessageEvent) => void) => () => void;\n}> = ({ children, subscribe }) => {\n  return (\n    <Context.Provider\n      value={{\n        subscribe,\n      }}\n    >\n      {children}\n    </Context.Provider>\n  );\n};\n\nexport default WorkerOnMessageProvider;\n","import React, {\n  createContext,\n  FC,\n  useCallback,\n  useContext,\n  useEffect,\n  useRef,\n} from 'react';\nimport { PHYSICS_UPDATE_RATE } from '../main/worker/planckjs/config';\nimport { useWorkerOnMessage } from './WorkerOnMessageProvider';\nimport {\n  WorkerMessageType,\n  WorkerOwnerMessageType,\n} from '../main/worker/shared/types';\nimport { useStoredData } from './StoredPhysicsData';\nimport { useUpdateMeshes } from './MeshSubscriptions';\n\ntype State = {\n  onFixedUpdate: (callback: (delta: number) => void) => () => void;\n  getPhysicsStepTimeRemainingRatio: (time: number) => number;\n};\n\nconst Context = createContext((null as unknown) as State);\n\nexport const useGetPhysicsStepTimeRemainingRatio = () => {\n  return useContext(Context).getPhysicsStepTimeRemainingRatio;\n};\n\nexport const useFixedUpdate = (callback: (delta: number) => void) => {\n  const onFixedUpdate = useContext(Context).onFixedUpdate;\n\n  useEffect(() => {\n    const unsubscribe = onFixedUpdate(callback);\n\n    return () => {\n      unsubscribe();\n    };\n  }, [onFixedUpdate, callback]);\n};\n\nconst PhysicsSync: FC<{\n  worker: Worker | MessagePort;\n  noLerping?: boolean;\n}> = ({ children, worker, noLerping = false }) => {\n  const lastUpdateRef = useRef(Date.now());\n  const countRef = useRef(0);\n  const callbacksRef = useRef<{\n    [key: string]: (delta: number) => void;\n  }>({});\n  const updateMeshes = useUpdateMeshes();\n\n  const getPhysicsStepTimeRemainingRatio = useCallback(\n    (previousTime: number) => {\n      const nextExpectedUpdate =\n        lastUpdateRef.current + PHYSICS_UPDATE_RATE + 1;\n      const time = Date.now();\n      let ratio = (time - previousTime) / (nextExpectedUpdate - previousTime);\n      ratio = ratio > 1 ? 1 : ratio;\n      ratio = ratio < 0 ? 0 : ratio;\n      return ratio;\n    },\n    [lastUpdateRef]\n  );\n\n  const onFixedUpdate = useCallback(\n    (callback: (delta: number) => void) => {\n      const key = countRef.current;\n      countRef.current += 1;\n\n      callbacksRef.current[key] = callback;\n\n      const unsubscribe = () => {\n        delete callbacksRef.current[key];\n      };\n\n      return unsubscribe;\n    },\n    [callbacksRef]\n  );\n\n  const onMessage = useWorkerOnMessage();\n  const storedData = useStoredData();\n\n  const debugRefs = useRef<{\n    timer: any;\n    hasReceived: boolean;\n  }>({\n    timer: null,\n    hasReceived: false,\n  });\n\n  useEffect(() => {\n    debugRefs.current.timer = setTimeout(() => {\n      console.warn('no initial physics data received...');\n    }, 1000);\n\n    const onPhysicsStep = () => {\n      const lastUpdate = lastUpdateRef.current;\n      const now = Date.now();\n      const delta = !lastUpdate ? 1 / 60 : (now - lastUpdate) / 1000;\n      lastUpdateRef.current = now;\n\n      const callbacks = callbacksRef.current;\n\n      Object.values(callbacks).forEach(callback => {\n        callback(delta);\n      });\n    };\n\n    const unsubscribe = onMessage((event: MessageEvent) => {\n      const type = event.data.type;\n\n      if (type === WorkerOwnerMessageType.PHYSICS_STEP) {\n        debugRefs.current.hasReceived = true;\n        if (debugRefs.current.timer) {\n          clearInterval(debugRefs.current.timer);\n        }\n        debugRefs.current.timer = setTimeout(() => {\n          console.warn('over 1 second since last physics step...');\n        }, 1000);\n        const positions = event.data.positions as Float32Array;\n        const angles = event.data.angles as Float32Array;\n        updateMeshes(positions, angles, noLerping);\n        worker.postMessage(\n          {\n            type: WorkerMessageType.PHYSICS_STEP_PROCESSED,\n            positions,\n            angles,\n            physicsTick: event.data.physicsTick as number,\n          },\n          [positions.buffer, angles.buffer]\n        );\n\n        if (event.data.bodies) {\n          storedData.bodies = event.data.bodies.reduce(\n            (acc: { [key: string]: number }, id: string) => ({\n              ...acc,\n              [id]: (event.data as any).bodies.indexOf(id),\n            }),\n            {}\n          );\n        }\n        onPhysicsStep();\n      }\n    });\n\n    worker.postMessage(\n        {\n          type: WorkerMessageType.READY_FOR_PHYSICS,\n        }\n    )\n\n    return () => {\n      unsubscribe();\n    };\n  }, [\n    onMessage,\n    callbacksRef,\n    lastUpdateRef,\n    worker,\n    updateMeshes,\n    noLerping,\n    storedData,\n  ]);\n\n  return (\n    <Context.Provider\n      value={{\n        onFixedUpdate,\n        getPhysicsStepTimeRemainingRatio,\n      }}\n    >\n      {children}\n    </Context.Provider>\n  );\n};\n\nexport default PhysicsSync;\n","import { useCallback, useEffect, useRef } from 'react';\n\nexport type Subscribe = (callback: (event: MessageEvent) => void) => () => void;\n\nexport const useWorkerMessages = (worker: undefined | Worker | MessagePort) => {\n  const idCount = useRef(0);\n  const subscriptionsRef = useRef<{\n    [key: string]: (event: MessageEvent) => void;\n  }>({});\n\n  const subscribe = useCallback(\n    (callback: (event: MessageEvent) => void) => {\n      const id = idCount.current;\n      idCount.current += 1;\n\n      subscriptionsRef.current[id] = callback;\n\n      return () => {\n        delete subscriptionsRef.current[id];\n      };\n    },\n    [subscriptionsRef]\n  );\n\n  useEffect(() => {\n    if (!worker) return;\n    const previousOnMessage = worker.onmessage;\n    worker.onmessage = (event: MessageEvent) => {\n      Object.values(subscriptionsRef.current).forEach(callback => {\n        callback(event);\n      });\n      if (previousOnMessage) {\n        (previousOnMessage as any)(event);\n      }\n    };\n  }, [worker, subscriptionsRef]);\n\n  return subscribe;\n};\n","import React, {\n  createContext,\n  FC,\n  useContext,\n  useEffect,\n  useState,\n} from 'react';\nimport {PhysicsProps, WorkerMessageType, WorkerOwnerMessageType} from './worker/shared/types';\nimport WorkerOnMessageProvider from '../shared/WorkerOnMessageProvider';\nimport PhysicsSync from '../shared/PhysicsSync';\nimport StoredPhysicsData from '../shared/StoredPhysicsData';\nimport MeshSubscriptions from '../shared/MeshSubscriptions';\nimport PhysicsProvider from '../shared/PhysicsProvider';\nimport {useWorkerMessages} from \"./hooks/useWorkerMessages\";\n\ntype ContextState = {\n  worker: Worker;\n};\n\nconst Context = createContext((null as unknown) as ContextState);\n\nexport const usePhysicsWorker = () => {\n  return useContext(Context).worker;\n};\n\nconst PhysicsWorker: FC<PhysicsProps & {\n  physicsWorker: Worker,\n}> = ({ children, physicsWorker, config, worldParams }) => {\n\n  const worker = physicsWorker\n\n  const [initiated, setInitiated] = useState(false)\n\n  useEffect(() => {\n    worker.postMessage({\n      type: WorkerMessageType.INIT,\n      props: {\n        config,\n        worldParams,\n      },\n    });\n  }, [worker]);\n\n  const subscribe = useWorkerMessages(worker)\n\n  useEffect(() => {\n\n    const unsubscribe = subscribe((event) => {\n\n      const type = event.data.type;\n\n      if (type === WorkerOwnerMessageType.INITIATED) {\n        setInitiated(true)\n      }\n\n      return () => {\n        unsubscribe()\n      }\n    })\n\n  }, [subscribe, setInitiated])\n\n  if (!initiated) return null\n\n  return (\n    <Context.Provider\n      value={{\n        worker,\n      }}\n    >\n      <PhysicsProvider worker={worker}>\n        <StoredPhysicsData>\n          <MeshSubscriptions>\n            <WorkerOnMessageProvider subscribe={subscribe}>\n              <PhysicsSync worker={worker}>{children}</PhysicsSync>\n            </WorkerOnMessageProvider>\n          </MeshSubscriptions>\n        </StoredPhysicsData>\n      </PhysicsProvider>\n    </Context.Provider>\n  );\n};\n\nexport default PhysicsWorker;\n","import React, { useCallback } from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport { useGetPhysicsStepTimeRemainingRatio } from '../shared/PhysicsSync';\nimport { useLerpMeshes } from '../shared/MeshSubscriptions';\n\nconst R3FPhysicsObjectUpdater: React.FC = ({ children }) => {\n  const getPhysicsStepTimeRemainingRatio = useGetPhysicsStepTimeRemainingRatio();\n  const lerpMeshes = useLerpMeshes();\n\n  const onFrame = useCallback(() => {\n    lerpMeshes(getPhysicsStepTimeRemainingRatio);\n  }, [getPhysicsStepTimeRemainingRatio, lerpMeshes]);\n\n  useFrame(onFrame);\n\n  return <>{children}</>;\n};\n\nexport default R3FPhysicsObjectUpdater;\n","import React, {createContext, useCallback, useContext, useEffect, useState} from 'react';\nimport {ValidUUID, WorkerOwnerMessageType} from '../main/worker/shared/types';\nimport { CollisionEventProps } from '../main/worker/planckjs/data';\nimport {useWorkerOnMessage} from \"./WorkerOnMessageProvider\";\n\ntype CollisionsProviderContextState = {\n  addCollisionHandler: (\n    started: boolean,\n    uuid: ValidUUID,\n    callback: (data: any, fixtureIndex: number, collidedFixtureIndex: number, isSensor: boolean) => void\n  ) => void;\n  removeCollisionHandler: (started: boolean, uuid: ValidUUID) => void;\n  handleBeginCollision: (data: CollisionEventProps) => void;\n  handleEndCollision: (data: CollisionEventProps) => void;\n};\n\nconst CollisionsProviderContext = createContext(\n  (null as unknown) as CollisionsProviderContextState\n);\n\nexport const useCollisionsProviderContext = (): CollisionsProviderContextState => {\n  return useContext(CollisionsProviderContext);\n};\n\nconst CollisionsProvider: React.FC = ({ children }) => {\n  const [collisionStartedEvents] = useState<{\n    [key: string]: (data: any, fixtureIndex: number, collidedFixtureIndex: number, isSensor: boolean) => void;\n  }>({});\n\n  const [collisionEndedEvents] = useState<{\n    [key: string]: (data: any, fixtureIndex: number, collidedFixtureIndex: number, isSensor: boolean) => void;\n  }>({});\n\n  const addCollisionHandler = useCallback(\n    (\n      started: boolean,\n      uuid: ValidUUID,\n      callback: (data: any, fixtureIndex: number, collidedFixtureIndex: number, isSensor: boolean) => void\n    ) => {\n      if (started) {\n        collisionStartedEvents[uuid] = callback;\n      } else {\n        collisionEndedEvents[uuid] = callback;\n      }\n    },\n    []\n  );\n\n  const removeCollisionHandler = useCallback(\n    (started: boolean, uuid: ValidUUID) => {\n      if (started) {\n        delete collisionStartedEvents[uuid];\n      } else {\n        delete collisionEndedEvents[uuid];\n      }\n    },\n    []\n  );\n\n  const handleBeginCollision = useCallback(\n    (data: CollisionEventProps) => {\n      if (collisionStartedEvents[data.uuid]) {\n        collisionStartedEvents[data.uuid](\n          data.data,\n          data.fixtureIndex,\n          data.collidedFixtureIndex,\n          data.isSensor\n        );\n      }\n    },\n    [collisionStartedEvents]\n  );\n\n  const handleEndCollision = useCallback(\n    (data: CollisionEventProps) => {\n      if (collisionEndedEvents[data.uuid]) {\n        collisionEndedEvents[data.uuid](\n          data.data,\n          data.fixtureIndex,\n          data.collidedFixtureIndex,\n          data.isSensor\n        );\n      }\n    },\n    [collisionEndedEvents]\n  );\n\n  const onMessage = useWorkerOnMessage();\n\n  useEffect(() => {\n\n      const unsubscribe = onMessage((event: MessageEvent) => {\n          const type = event.data.type;\n\n          switch (type) {\n              case WorkerOwnerMessageType.BEGIN_COLLISION:\n                handleBeginCollision(event.data.props as any)\n                break;\n              case WorkerOwnerMessageType.END_COLLISION:\n                handleEndCollision(event.data.props as any)\n                break;\n              default:\n          }\n\n      })\n\n      return unsubscribe\n\n  }, [])\n\n  return (\n    <CollisionsProviderContext.Provider\n      value={{\n        addCollisionHandler,\n        removeCollisionHandler,\n        handleBeginCollision,\n        handleEndCollision,\n      }}\n    >\n      {children}\n    </CollisionsProviderContext.Provider>\n  );\n};\n\nexport default CollisionsProvider;\n","import React, {createContext, useCallback, useContext, useEffect, useMemo, useState} from \"react\"\nimport {Object3D} from \"three\";\n\ntype MeshRefsContextState = {\n    meshes: {\n        [key: string]: Object3D,\n    },\n    addMesh: (uuid: string, mesh: Object3D) => () => void,\n}\n\nconst MeshRefsContext = createContext(null as unknown as MeshRefsContextState)\n\nexport const useStoreMesh = (uuid: string, mesh: Object3D) => {\n    const addMesh = useContext(MeshRefsContext).addMesh\n\n    useEffect(() => {\n\n        const remove = addMesh(uuid, mesh)\n\n        return () => {\n            remove()\n        }\n\n    }, [addMesh, uuid, mesh])\n\n}\n\nexport const useStoredMesh = (uuid: string): Object3D | null => {\n    const meshes = useContext(MeshRefsContext).meshes\n\n    const mesh = useMemo(() => {\n        return meshes[uuid] ?? null\n    }, [uuid, meshes])\n\n    return mesh\n}\n\nconst MeshRefs: React.FC = ({children}) => {\n\n    const [meshes, setMeshes] = useState<{\n        [key: string]: Object3D,\n    }>({})\n\n    const addMesh = useCallback((uuid: string, mesh: Object3D) => {\n\n        setMeshes(state => {\n            return {\n                ...state,\n                [uuid]: mesh,\n            }\n        })\n\n        const removeMesh = () => {\n            setMeshes(state => {\n                const updated = {\n                    ...state,\n                }\n                delete updated[uuid]\n                return updated\n            })\n        }\n\n        return removeMesh\n\n    }, [setMeshes])\n\n    return (\n        <MeshRefsContext.Provider value={{\n            meshes,\n            addMesh,\n        }}>\n            {children}\n        </MeshRefsContext.Provider>\n    )\n}\n\nexport default MeshRefs","import React, {\n  createContext,\n  useCallback,\n  useContext,\n  useRef,\n  useState,\n} from 'react';\nimport { MessageData } from './types';\n\ntype MessagesContextState = {\n  handleMessage: (message: MessageData) => void;\n  subscribeToMessage: (\n    messageKey: string,\n    callback: (data: any) => void\n  ) => () => void;\n};\n\nconst MessagesContext = createContext(\n  (null as unknown) as MessagesContextState\n);\n\nexport const useMessagesContext = () => {\n  return useContext(MessagesContext);\n};\n\nexport const useOnMessage = () => {\n  return useMessagesContext().subscribeToMessage;\n};\n\nconst Messages: React.FC = ({ children }) => {\n  const messageCountRef = useRef(0);\n  const [messageSubscriptions] = useState<{\n    [key: string]: {\n      [id: number]: (data: any) => void;\n    };\n  }>({});\n\n  const subscribeToMessage = useCallback(\n    (messageKey: string, callback: (data: any) => void) => {\n      const id = messageCountRef.current;\n      messageCountRef.current += 1;\n\n      if (!messageSubscriptions[messageKey]) {\n        messageSubscriptions[messageKey] = {\n          [id]: callback,\n        };\n      } else {\n        messageSubscriptions[messageKey][id] = callback;\n      }\n\n      const unsubscribe = () => {\n        delete messageSubscriptions[messageKey][id];\n      };\n\n      return unsubscribe;\n    },\n    [messageSubscriptions]\n  );\n\n  const handleMessage = useCallback(\n    ({ key, data }: MessageData) => {\n\n      const subscriptions = messageSubscriptions[key];\n\n      if (subscriptions) {\n        Object.values(subscriptions).forEach(subscription => {\n          subscription(data);\n        });\n      }\n    },\n    [messageSubscriptions]\n  );\n\n  return (\n    <MessagesContext.Provider\n      value={{\n        handleMessage,\n        subscribeToMessage,\n      }}\n    >\n      {children}\n    </MessagesContext.Provider>\n  );\n};\n\nexport default Messages;\n","export enum MessageKeys {\n  SYNC_COMPONENT = 'SYNC_COMPONENT',\n}\n\nexport type MessageData = {\n  key: string;\n  data: any;\n};\n\nexport enum SyncComponentMessageType {\n  MOUNT,\n  UNMOUNT,\n  UPDATE,\n}\n\nexport enum SyncComponentType {\n  PLAYER,\n}\n\nexport type SyncComponentMessageInfo = {\n  componentType: SyncComponentType;\n  componentKey: string;\n};\n\nexport type ValidProps =\n  | undefined\n  | {\n      [key: string]: any;\n    };\n\nexport type SyncComponentMessage = {\n  data: ValidProps;\n  info: SyncComponentMessageInfo;\n  messageType: SyncComponentMessageType;\n};\n\nexport type MappedComponents = {\n  [key: string]: any;\n};\n","import React, { useEffect, useState } from 'react';\nimport { useOnMessage } from '../shared/Messages';\nimport {\n  MappedComponents,\n  MessageKeys,\n  SyncComponentMessage,\n  SyncComponentMessageType,\n  SyncComponentType,\n  ValidProps,\n} from '../shared/types';\n\nconst LogicHandler: React.FC<{\n  mappedComponentTypes: MappedComponents;\n}> = ({ children, mappedComponentTypes }) => {\n  const subscribeToMessage = useOnMessage();\n\n  const [components, setComponents] = useState<{\n    [key: string]: {\n      componentType: SyncComponentType;\n      props: ValidProps;\n    };\n  }>({});\n\n  useEffect(() => {\n    const unsubscribe = subscribeToMessage(\n      MessageKeys.SYNC_COMPONENT,\n      ({ info, messageType, data }: SyncComponentMessage) => {\n        const props = data || {};\n\n        switch (messageType) {\n          case SyncComponentMessageType.MOUNT:\n            setComponents(state => {\n              return {\n                ...state,\n                [info.componentKey]: {\n                  componentType: info.componentType,\n                  props,\n                },\n              };\n            });\n            break;\n          case SyncComponentMessageType.UPDATE:\n            setComponents(state => {\n              const previousData = state[info.componentKey]\n              const previousProps = previousData && previousData.props ? previousData.props : {}\n              return {\n                ...state,\n                [info.componentKey]: {\n                  componentType: info.componentType,\n                  props: {\n                    ...previousProps,\n                    ...props,\n                  },\n                },\n              };\n            });\n            break;\n          case SyncComponentMessageType.UNMOUNT:\n            setComponents(state => {\n              let update = {\n                ...state,\n              };\n              delete update[info.componentKey];\n              return update;\n            });\n            break;\n        }\n      }\n    );\n\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  return (\n    <>\n      {children}\n      {Object.entries(components).map(([key, { componentType, props }]) => {\n        const Component = mappedComponentTypes[componentType];\n        return Component ? <Component key={key} {...props} /> : null;\n      })}\n    </>\n  );\n};\n\nexport default LogicHandler;\n","import React, {createContext, useCallback, useContext} from \"react\"\nimport {WorkerOwnerMessageType} from \"../main/worker/shared/types\";\nimport {MessageData, MessageKeys} from \"./types\";\nimport {useMessagesContext} from \"./Messages\";\n\ntype ContextState = {\n    sendMessage: (key: string, data: any) => void,\n}\n\nconst Context = createContext(null as unknown as ContextState)\n\nexport const useSendMessage = () => {\n    return useContext(Context).sendMessage\n}\n\nconst SendMessages: React.FC<{\n    worker: Worker,\n}> = ({children, worker}) => {\n\n    const { handleMessage } = useMessagesContext();\n\n    const sendMessage = useCallback((key: string, data: any) => {\n\n        if (key === MessageKeys.SYNC_COMPONENT) {\n            throw new Error(`${key} is a reserved message key.`)\n        }\n\n        const message: MessageData = {\n            key,\n            data\n        }\n\n        worker.postMessage({\n            type: WorkerOwnerMessageType.MESSAGE,\n            message,\n        })\n\n        handleMessage(message)\n\n    }, [worker, handleMessage])\n\n    return (\n        <Context.Provider value={{sendMessage}}>\n            {children}\n        </Context.Provider>\n    )\n}\n\nexport default SendMessages","import React, { useEffect } from 'react';\nimport { usePhysicsWorker } from './PhysicsWorker';\nimport {\n  WorkerMessageType,\n  WorkerOwnerMessageType,\n} from './worker/shared/types';\nimport { MappedComponents, MessageData } from '../shared/types';\nimport Messages, { useMessagesContext } from '../shared/Messages';\nimport LogicHandler from './LogicHandler';\nimport SendMessages from \"../shared/SendMessages\";\n\nconst LogicWorkerInner: React.FC<{\n  worker: Worker;\n}> = ({ children, worker }) => {\n  const physicsWorker = usePhysicsWorker();\n\n  const { handleMessage } = useMessagesContext();\n\n  useEffect(() => {\n    const channel = new MessageChannel();\n    physicsWorker.postMessage({ command: 'connect' }, [channel.port1]);\n    worker.postMessage({ command: 'connect' }, [channel.port2]);\n\n    worker.onmessage = (event: MessageEvent) => {\n      const type = event.data.type;\n\n      switch (type) {\n        case WorkerOwnerMessageType.MESSAGE:\n          handleMessage(event.data.message as MessageData);\n          break;\n      }\n    };\n\n    worker.postMessage({\n      type: WorkerMessageType.INIT,\n    });\n  }, [worker, physicsWorker]);\n\n  return <>{children}</>;\n};\n\nexport const LogicWorker: React.FC<{\n  worker: Worker;\n  logicMappedComponents: MappedComponents;\n}> = ({ worker, children, logicMappedComponents }) => {\n  return (\n    <Messages>\n      <SendMessages worker={worker}>\n        <LogicWorkerInner worker={worker}>\n          <LogicHandler mappedComponentTypes={logicMappedComponents}>\n            {children}\n          </LogicHandler>\n        </LogicWorkerInner>\n      </SendMessages>\n    </Messages>\n  );\n};\n","import React, { FC } from 'react';\nimport PhysicsWorker from './PhysicsWorker';\nimport R3FPhysicsObjectUpdater from './R3FPhysicsObjectUpdater';\nimport CollisionsProvider from '../shared/CollisionsProvider';\nimport { MappedComponents } from '../shared/types';\nimport MeshRefs from \"./MeshRefs\";\nimport {PhysicsProps} from \"./worker/shared/types\";\nimport {LogicWorker} from \"./LogicWorker\";\n\nexport const Engine: FC<PhysicsProps & {\n  physicsWorker: Worker,\n  logicWorker?: Worker;\n  logicMappedComponents?: MappedComponents;\n}> = ({\n  children,\n  physicsWorker,\n  config,\n  worldParams,\n  logicWorker,\n  logicMappedComponents = {},\n}) => {\n  if (logicWorker) {\n    return (\n      <MeshRefs>\n        <PhysicsWorker physicsWorker={physicsWorker} config={config} worldParams={worldParams}>\n          <CollisionsProvider>\n            <R3FPhysicsObjectUpdater>\n              <LogicWorker\n                worker={logicWorker}\n                logicMappedComponents={logicMappedComponents}\n              >\n                  {children}\n              </LogicWorker>\n            </R3FPhysicsObjectUpdater>\n          </CollisionsProvider>\n        </PhysicsWorker>\n      </MeshRefs>\n    );\n  }\n\n  return (\n    <MeshRefs>\n      <PhysicsWorker physicsWorker={physicsWorker} config={config} worldParams={worldParams}>\n        <CollisionsProvider>\n          <R3FPhysicsObjectUpdater>\n              {children}\n          </R3FPhysicsObjectUpdater>\n        </CollisionsProvider>\n      </PhysicsWorker>\n    </MeshRefs>\n  );\n};\n","import { render } from 'react-nil';\nimport { createElement, FC } from 'react';\nimport { proxy } from 'valtio';\nimport { WorkerMessageType } from '../main/worker/shared/types';\n\nexport const logicWorkerHandler = (selfWorker: Worker, app: FC) => {\n  let physicsWorkerPort: MessagePort;\n\n  const state = proxy<{\n    physicsWorkerLoaded: boolean;\n    initiated: boolean;\n  }>({\n    physicsWorkerLoaded: false,\n    initiated: false,\n  });\n\n  const workerRef: {\n    physicsWorker: null | Worker | MessagePort;\n  } = {\n    physicsWorker: null,\n  };\n\n  selfWorker.onmessage = (event: MessageEvent) => {\n    switch (event.data.command) {\n      case 'connect':\n        physicsWorkerPort = event.ports[0];\n        workerRef.physicsWorker = physicsWorkerPort;\n        state.physicsWorkerLoaded = true;\n        return;\n\n      case 'forward':\n        physicsWorkerPort.postMessage(event.data.message);\n        return;\n    }\n\n    const { type, props = {} } = event.data as {\n      type: WorkerMessageType;\n      props: any;\n    };\n\n    switch (type) {\n      case WorkerMessageType.INIT:\n        state.initiated = true;\n        break;\n    }\n  };\n  render(\n    createElement(\n      require('./logicWorkerApp/index').WorkerApp,\n      {\n        worker: selfWorker,\n        state,\n        workerRef,\n        app,\n      },\n      null\n    )\n  );\n};\n","import React from 'react';\nimport StoredPhysicsData from '../../shared/StoredPhysicsData';\nimport MeshSubscriptions from '../../shared/MeshSubscriptions';\nimport WorkerOnMessageProvider from '../../shared/WorkerOnMessageProvider';\nimport PhysicsSync from '../../shared/PhysicsSync';\nimport PhysicsProvider from '../../shared/PhysicsProvider';\nimport {useWorkerMessages} from \"../../main/hooks/useWorkerMessages\";\n\nconst PhysicsHandler: React.FC<{\n  worker: null | Worker | MessagePort;\n}> = ({ children, worker }) => {\n  if (!worker) return null;\n\n  const subscribe = useWorkerMessages(worker)\n\n  return (\n    <PhysicsProvider worker={worker}>\n      <WorkerOnMessageProvider subscribe={subscribe}>\n        <StoredPhysicsData>\n          <MeshSubscriptions>\n            <PhysicsSync worker={worker} noLerping>\n              {children}\n            </PhysicsSync>\n          </MeshSubscriptions>\n        </StoredPhysicsData>\n      </WorkerOnMessageProvider>\n    </PhysicsProvider>\n  );\n};\n\nexport default PhysicsHandler;\n","import React, {useEffect} from \"react\"\nimport {useMessagesContext} from \"../../shared/Messages\";\nimport {WorkerOwnerMessageType} from \"../../main/worker/shared/types\";\nimport {MessageData} from \"../../shared/types\";\n\nconst MessageHandler: React.FC<{\n    worker: Worker,\n}> = ({children, worker}) => {\n\n    const { handleMessage } = useMessagesContext();\n\n    useEffect(() => {\n\n        worker.onmessage = (event: MessageEvent) => {\n            const type = event.data.type;\n\n            switch (type) {\n                case WorkerOwnerMessageType.MESSAGE:\n                    handleMessage(event.data.message as MessageData);\n                    break;\n            }\n        };\n    }, [worker]);\n\n    return (\n        <>\n            {children}\n        </>\n    )\n}\n\nexport default MessageHandler","import React, {createContext, useContext} from 'react';\nimport {MessageData} from \"../shared/types\";\nimport PhysicsHandler from \"./logicWorkerApp/PhysicsHandler\";\nimport CollisionsProvider from \"../shared/CollisionsProvider\";\nimport MeshRefs from \"../main/MeshRefs\";\nimport Messages from \"../shared/Messages\";\nimport SendMessages from \"../shared/SendMessages\";\nimport MessageHandler from \"./logicWorkerApp/MessageHandler\";\n\nexport type ContextState = {\n  physicsWorker: Worker | MessagePort;\n  sendMessageToMain: (message: MessageData) => void;\n};\n\nexport const Context = createContext((null as unknown) as ContextState);\n\nexport const useWorkerAppContext = (): ContextState => {\n  return useContext(Context);\n};\n\nexport const useSendMessageToMain = () => {\n  return useWorkerAppContext().sendMessageToMain;\n};\n\nconst ApiWrapper: React.FC<{\n  worker: Worker,\n  physicsWorker: Worker | MessagePort,\n  sendMessageToMain: (message: MessageData) => void,\n}> = ({\n  children,\n  worker,\n  physicsWorker,\n  sendMessageToMain\n}) => {\n  return (\n      <Context.Provider value={{ physicsWorker, sendMessageToMain }}>\n        <Messages>\n          <MessageHandler worker={worker}>\n            <SendMessages worker={worker}>\n              <MeshRefs>\n                <PhysicsHandler worker={physicsWorker}>\n                  <CollisionsProvider>\n                      {children}\n                  </CollisionsProvider>\n                </PhysicsHandler>\n              </MeshRefs>\n            </SendMessages>\n          </MessageHandler>\n        </Messages>\n      </Context.Provider>\n  );\n};\n\nexport default ApiWrapper;\n\nexport const withLogicWrapper = (WrappedComponent: any) => {\n  return (props: any) => {\n    return (\n      <ApiWrapper {...props}>\n        <WrappedComponent />\n      </ApiWrapper>\n    );\n  };\n};\n","import { useCallback } from 'react';\nimport {\n  MessageKeys,\n  SyncComponentMessageInfo,\n  SyncComponentMessageType,\n} from '../../../shared/types';\nimport {useSendMessageToMain} from \"../../ApiWrapper\";\n\nexport const useSendSyncComponentMessage = () => {\n  const sendMessageRaw = useSendMessageToMain();\n\n  const sendMessage = useCallback(\n    (\n      messageType: SyncComponentMessageType,\n      info: SyncComponentMessageInfo,\n      data?: any\n    ) => {\n      sendMessageRaw({\n        key: MessageKeys.SYNC_COMPONENT,\n        data: {\n          messageType,\n          info,\n          data,\n        },\n      });\n    },\n    [sendMessageRaw]\n  );\n\n  return sendMessage;\n};\n","import { useCallback, useEffect, useMemo } from 'react';\nimport {\n  SyncComponentMessageType,\n  SyncComponentType,\n} from '../../../shared/types';\nimport { useSendSyncComponentMessage } from './messaging';\n\nexport const useSyncWithMainComponent = (\n  componentType: SyncComponentType,\n  componentKey: string,\n  initialProps?: any\n) => {\n  const sendMessage = useSendSyncComponentMessage();\n\n  const info = useMemo(\n    () => ({\n      componentType,\n      componentKey,\n    }),\n    [componentType, componentKey]\n  );\n\n  const updateProps = useCallback(\n    (props: any) => {\n      sendMessage(SyncComponentMessageType.UPDATE, info, props);\n    },\n    [info]\n  );\n\n  useEffect(() => {\n    sendMessage(SyncComponentMessageType.MOUNT, info, initialProps);\n\n    return () => {\n      sendMessage(SyncComponentMessageType.UNMOUNT, info);\n    };\n  }, [info]);\n\n  return updateProps;\n};\n","import React, {MutableRefObject, ReactElement, useRef} from \"react\"\nimport {ValidUUID} from \"./worker/shared/types\";\nimport {Object3D} from \"three\";\nimport {BodyApi, BodyParams, useBody, useBodyApi} from \"./hooks/useBody\";\nimport {AddBodyDef} from \"./worker/planckjs/bodies\";\nimport { useSubscribeMesh } from \"../shared/MeshSubscriptions\";\n\nexport const BodySync: React.FC<{\n    children: ({uuid, ref, api}: {uuid: ValidUUID, ref: MutableRefObject<Object3D>, api?: BodyApi}) => ReactElement,\n    uuid: ValidUUID,\n    applyAngle?: boolean,\n    isDynamic?: boolean,\n    bodyRef?: MutableRefObject<Object3D>,\n    wrapWithGroup?: boolean,\n}> = ({\n     children,\n     uuid,\n     bodyRef,\n     applyAngle = true,\n     isDynamic = true,\n     wrapWithGroup = false,\n }) => {\n\n    const localRef = useRef<Object3D>(new Object3D())\n\n    const ref = bodyRef ?? localRef\n\n    useSubscribeMesh(uuid, ref, applyAngle, isDynamic)\n\n    const api = useBodyApi(uuid)\n\n    const inner = children({uuid, ref, api: api ?? undefined})\n\n    if (wrapWithGroup) {\n        return (\n            <group ref={ref}>\n                {inner}\n            </group>\n        )\n    }\n\n    return inner\n\n}\n\nexport const Body: React.FC<{\n    children: ({uuid, ref, api}: {uuid: ValidUUID, ref: MutableRefObject<Object3D>, api: BodyApi}) => ReactElement,\n    bodyDef: AddBodyDef,\n    params?: BodyParams,\n    wrapWithGroup?: boolean,\n}> = ({children, params, bodyDef, wrapWithGroup}) => {\n\n    const [ref, api, uuid] = useBody(() => bodyDef, params)\n\n    const inner = children({ref, uuid, api})\n\n    if (wrapWithGroup) {\n        return (\n            <group ref={ref}>\n                {inner}\n            </group>\n        )\n    }\n\n    return inner\n}\n","import {createElement, FC} from \"react\";\nimport {PhysicsProps, WorkerMessageType} from \"./shared/types\";\nimport {render} from \"react-nil\";\n\nexport const physicsWorkerHandler = (selfWorker: Worker) => {\n\n    selfWorker.onmessage = (event: MessageEvent) => {\n        const { type, props = {} } = event.data as {\n            type: WorkerMessageType;\n            props: any;\n        };\n        switch (type) {\n            case WorkerMessageType.INIT:\n                const { worldParams = {}, config = {} } = props as PhysicsProps;\n                const {\n                    maxNumberOfDynamicObjects = 100,\n                    updateRate = 1000 / 30,\n                } = config;\n                render(\n                    createElement(\n                        require('./worker/app/index').App,\n                        {\n                            worker: selfWorker,\n                            config: {\n                                maxNumberOfDynamicObjects,\n                                updateRate,\n                            },\n                            worldParams,\n                        },\n                        null\n                    )\n                );\n                break;\n        }\n    };\n};","import {ValidUUID} from \"../worker/shared/types\";\nimport {useCollisionsProviderContext} from \"../../shared/CollisionsProvider\";\nimport {useEffect} from \"react\";\n\nexport const useCollisionEvents = (\n    uuid: ValidUUID,\n    onCollideStart?: (data: any, fixtureIndex: number, collidedFixtureIndex: number, isSensor: boolean) => void,\n    onCollideEnd?: (data: any, fixtureIndex: number, collidedFixtureIndex: number, isSensor: boolean) => void,\n) => {\n\n    const {\n        addCollisionHandler,\n        removeCollisionHandler\n    } = useCollisionsProviderContext()\n\n    // @ts-ignore\n    useEffect(() => {\n        if (onCollideStart) {\n            addCollisionHandler(true, uuid, onCollideStart)\n            return () => {\n                removeCollisionHandler(true, uuid)\n            }\n        }\n    }, [uuid, onCollideStart])\n\n    // @ts-ignore\n    useEffect(() => {\n        if (onCollideEnd) {\n            addCollisionHandler(false, uuid, onCollideEnd)\n            return () => {\n                removeCollisionHandler(false, uuid)\n            }\n        }\n    }, [uuid, onCollideEnd])\n\n}\n"],"names":["WorkerMessageType","WorkerOwnerMessageType","PHYSICS_UPDATE_RATE","BodyType","BodyShape","createBoxFixture","width","height","center","angle","fixtureOptions","fixture","shape","box","hx","hy","createCircleFixture","radius","position","circle","Context","createContext","usePhysicsProvider","useContext","PhysicsProvider","children","worker","workerAddBody","useCallback","props","postMessage","type","ADD_BODY","workerRemoveBody","REMOVE_BODY","workerSetBody","SET_BODY","workerUpdateBody","UPDATE_BODY","React","Provider","value","getPositionAndAngle","buffers","index","undefined","positions","length","start","slice","angles","useStoredData","data","StoredPhysicsData","useState","bodies","lerp","MathUtils","useLerpMeshes","lerpMeshes","useSubscribeMesh","uuid","objectRef","applyAngle","isDynamic","addSubscription","useEffect","unsubscribe","useUpdateMeshes","updateMeshes","MeshSubscriptions","subscriptionsRef","useRef","getPhysicsStepTimeRemainingRatio","Object","values","current","forEach","target","lastUpdate","object","physicsRemainingRatio","Date","now","x","y","rotation","z","storedData","immediate","entries","update","useBodyApi","passedUuid","api","useMemo","applyForceToCenter","vec","method","methodParams","applyLinearImpulse","pos","setPosition","setAwake","flag","setLinearVelocity","updateBody","setAngle","useBody","propsFn","bodyParams","cacheKey","passedUUID","fwdRef","listenForCollisions","syncBody","localRef","ref","Object3D","useLayoutEffect","useWorkerOnMessage","subscribe","WorkerOnMessageProvider","useGetPhysicsStepTimeRemainingRatio","useFixedUpdate","callback","onFixedUpdate","PhysicsSync","noLerping","lastUpdateRef","countRef","callbacksRef","previousTime","nextExpectedUpdate","time","ratio","key","onMessage","debugRefs","timer","hasReceived","setTimeout","console","warn","onPhysicsStep","delta","callbacks","event","PHYSICS_STEP","clearInterval","PHYSICS_STEP_PROCESSED","physicsTick","buffer","reduce","acc","id","indexOf","READY_FOR_PHYSICS","useWorkerMessages","idCount","previousOnMessage","onmessage","usePhysicsWorker","PhysicsWorker","physicsWorker","config","worldParams","initiated","setInitiated","INIT","INITIATED","R3FPhysicsObjectUpdater","onFrame","useFrame","CollisionsProviderContext","useCollisionsProviderContext","CollisionsProvider","collisionStartedEvents","collisionEndedEvents","addCollisionHandler","started","removeCollisionHandler","handleBeginCollision","fixtureIndex","collidedFixtureIndex","isSensor","handleEndCollision","BEGIN_COLLISION","END_COLLISION","MeshRefsContext","useStoreMesh","mesh","addMesh","remove","useStoredMesh","meshes","MeshRefs","setMeshes","state","removeMesh","updated","MessagesContext","useMessagesContext","useOnMessage","subscribeToMessage","Messages","messageCountRef","messageSubscriptions","messageKey","handleMessage","subscriptions","subscription","MessageKeys","SyncComponentMessageType","SyncComponentType","LogicHandler","mappedComponentTypes","components","setComponents","SYNC_COMPONENT","info","messageType","MOUNT","componentKey","componentType","UPDATE","previousData","previousProps","UNMOUNT","map","Component","useSendMessage","sendMessage","SendMessages","Error","message","MESSAGE","LogicWorkerInner","channel","MessageChannel","command","port1","port2","LogicWorker","logicMappedComponents","Engine","logicWorker","logicWorkerHandler","selfWorker","app","physicsWorkerPort","proxy","physicsWorkerLoaded","workerRef","ports","render","createElement","require","WorkerApp","PhysicsHandler","MessageHandler","useWorkerAppContext","useSendMessageToMain","sendMessageToMain","ApiWrapper","withLogicWrapper","WrappedComponent","useSendSyncComponentMessage","sendMessageRaw","useSyncWithMainComponent","initialProps","updateProps","BodySync","bodyRef","wrapWithGroup","inner","Body","params","bodyDef","physicsWorkerHandler","maxNumberOfDynamicObjects","updateRate","App","useCollisionEvents","onCollideStart","onCollideEnd"],"mappings":"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"}