{"version":3,"file":"workerapp.esm.js","sources":["../src/main/worker/shared/types.ts","../src/logic/logicWorkerApp/index.tsx"],"sourcesContent":["import { WorldDef } from 'planck-js';\n\nexport enum WorkerMessageType {\n  INIT,\n  STEP,\n  LOGIC_FRAME,\n  ADD_BODY,\n  REMOVE_BODY,\n  SET_BODY,\n  UPDATE_BODY,\n  PHYSICS_STEP_PROCESSED,\n  READY_FOR_PHYSICS,\n}\n\nexport enum WorkerOwnerMessageType {\n  FRAME,\n  PHYSICS_STEP,\n  SYNC_BODIES,\n  BEGIN_COLLISION,\n  END_COLLISION,\n  MESSAGE,\n  INITIATED,\n}\n\nexport type Buffers = {\n  positions: Float32Array;\n  angles: Float32Array;\n};\n\nexport type ValidUUID = string | number;\n\nexport type PhysicsProps = {\n  config?: {\n    maxNumberOfDynamicObjects?: number;\n    updateRate?: number;\n  };\n  worldParams?: WorldDef;\n};\n","import React, { useCallback, useState } from 'react';\nimport { FC, useEffect } from 'react';\nimport { useProxy } from 'valtio';\nimport { MessageData } from '../../shared/types';\nimport { WorkerOwnerMessageType } from '../../main/worker/shared/types';\n\nconst WorkerApp: FC<{\n  worker: Worker;\n  workerRef: {\n    physicsWorker: null | Worker | MessagePort;\n  };\n  state: {\n    physicsWorkerLoaded: boolean;\n    initiated: boolean;\n  };\n  app: any;\n}> = ({ app, worker, state, workerRef }) => {\n  const proxyState = useProxy(state);\n  const initiated = proxyState.initiated;\n  const physicsWorkerLoaded = proxyState.physicsWorkerLoaded;\n  const [physicsWorker, setPhysicsWorker] = useState<\n    null | Worker | MessagePort\n  >(null);\n\n  useEffect(() => {\n    if (physicsWorkerLoaded) {\n      if (!workerRef.physicsWorker) {\n        throw new Error(`Worker missing.`);\n      }\n      setPhysicsWorker(workerRef.physicsWorker);\n    }\n  }, [physicsWorkerLoaded]);\n\n  const sendMessageToMain = useCallback(\n    (message: MessageData) => {\n      const update = {\n        type: WorkerOwnerMessageType.MESSAGE,\n        message,\n      };\n\n      worker.postMessage(update);\n    },\n    [worker]\n  );\n\n  if (!initiated || !physicsWorker) return null;\n\n  const App = app\n\n  return (\n      <App worker={worker} physicsWorker={physicsWorker} sendMessageToMain={sendMessageToMain}/>\n  )\n\n};\n\nexport { WorkerApp };\n"],"names":["WorkerMessageType","WorkerOwnerMessageType","WorkerApp","app","worker","state","workerRef","proxyState","useProxy","initiated","physicsWorkerLoaded","useState","physicsWorker","setPhysicsWorker","useEffect","Error","sendMessageToMain","useCallback","message","update","type","MESSAGE","postMessage","App","React"],"mappings":";;;AAEA,IAAYA,iBAAZ;;AAAA,WAAYA;AACVA,EAAAA,gDAAA,SAAA;AACAA,EAAAA,gDAAA,SAAA;AACAA,EAAAA,uDAAA,gBAAA;AACAA,EAAAA,oDAAA,aAAA;AACAA,EAAAA,uDAAA,gBAAA;AACAA,EAAAA,oDAAA,aAAA;AACAA,EAAAA,uDAAA,gBAAA;AACAA,EAAAA,kEAAA,2BAAA;AACAA,EAAAA,6DAAA,sBAAA;AACD,CAVD,EAAYA,iBAAiB,KAAjBA,iBAAiB,KAAA,CAA7B;;AAYA,IAAYC,sBAAZ;;AAAA,WAAYA;AACVA,EAAAA,2DAAA,UAAA;AACAA,EAAAA,kEAAA,iBAAA;AACAA,EAAAA,iEAAA,gBAAA;AACAA,EAAAA,qEAAA,oBAAA;AACAA,EAAAA,mEAAA,kBAAA;AACAA,EAAAA,6DAAA,YAAA;AACAA,EAAAA,+DAAA,cAAA;AACD,CARD,EAAYA,sBAAsB,KAAtBA,sBAAsB,KAAA,CAAlC;;ICRMC,SAAS,GAUV,SAVCA,SAUD;MAAGC,WAAAA;MAAKC,cAAAA;MAAQC,aAAAA;MAAOC,iBAAAA;AAC1B,MAAMC,UAAU,GAAGC,QAAQ,CAACH,KAAD,CAA3B;AACA,MAAMI,SAAS,GAAGF,UAAU,CAACE,SAA7B;AACA,MAAMC,mBAAmB,GAAGH,UAAU,CAACG,mBAAvC;;kBAC0CC,QAAQ,CAEhD,IAFgD;MAA3CC;MAAeC;;AAItBC,EAAAA,SAAS,CAAC;AACR,QAAIJ,mBAAJ,EAAyB;AACvB,UAAI,CAACJ,SAAS,CAACM,aAAf,EAA8B;AAC5B,cAAM,IAAIG,KAAJ,mBAAN;AACD;;AACDF,MAAAA,gBAAgB,CAACP,SAAS,CAACM,aAAX,CAAhB;AACD;AACF,GAPQ,EAON,CAACF,mBAAD,CAPM,CAAT;AASA,MAAMM,iBAAiB,GAAGC,WAAW,CACnC,UAACC,OAAD;AACE,QAAMC,MAAM,GAAG;AACbC,MAAAA,IAAI,EAAEnB,sBAAsB,CAACoB,OADhB;AAEbH,MAAAA,OAAO,EAAPA;AAFa,KAAf;AAKAd,IAAAA,MAAM,CAACkB,WAAP,CAAmBH,MAAnB;AACD,GARkC,EASnC,CAACf,MAAD,CATmC,CAArC;AAYA,MAAI,CAACK,SAAD,IAAc,CAACG,aAAnB,EAAkC,OAAO,IAAP;AAElC,MAAMW,GAAG,GAAGpB,GAAZ;AAEA,SACIqB,mBAAA,CAACD,GAAD;AAAKnB,IAAAA,MAAM,EAAEA;AAAQQ,IAAAA,aAAa,EAAEA;AAAeI,IAAAA,iBAAiB,EAAEA;GAAtE,CADJ;AAID,CA/CD;;;;"}