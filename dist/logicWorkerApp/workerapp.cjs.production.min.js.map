{"version":3,"file":"workerapp.cjs.production.min.js","sources":["../src/main/worker/shared/types.ts","../src/logic/logicWorkerApp/index.tsx"],"sourcesContent":["import { WorldDef } from 'planck-js';\n\nexport enum WorkerMessageType {\n  INIT,\n  STEP,\n  LOGIC_FRAME,\n  ADD_BODY,\n  REMOVE_BODY,\n  SET_BODY,\n  UPDATE_BODY,\n  PHYSICS_STEP_PROCESSED,\n  READY_FOR_PHYSICS,\n}\n\nexport enum WorkerOwnerMessageType {\n  FRAME,\n  PHYSICS_STEP,\n  SYNC_BODIES,\n  BEGIN_COLLISION,\n  END_COLLISION,\n  MESSAGE,\n  INITIATED,\n}\n\nexport type Buffers = {\n  positions: Float32Array;\n  angles: Float32Array;\n};\n\nexport type ValidUUID = string | number;\n\nexport type PhysicsProps = {\n  config?: {\n    maxNumberOfDynamicObjects?: number;\n    updateRate?: number;\n  };\n  worldParams?: WorldDef;\n};\n","import React, { useCallback, useState } from 'react';\nimport { FC, useEffect } from 'react';\nimport { useProxy } from 'valtio';\nimport { MessageData } from '../../shared/types';\nimport { WorkerOwnerMessageType } from '../../main/worker/shared/types';\n\nconst WorkerApp: FC<{\n  worker: Worker;\n  workerRef: {\n    physicsWorker: null | Worker | MessagePort;\n  };\n  state: {\n    physicsWorkerLoaded: boolean;\n    initiated: boolean;\n  };\n  app: any;\n}> = ({ app, worker, state, workerRef }) => {\n  const proxyState = useProxy(state);\n  const initiated = proxyState.initiated;\n  const physicsWorkerLoaded = proxyState.physicsWorkerLoaded;\n  const [physicsWorker, setPhysicsWorker] = useState<\n    null | Worker | MessagePort\n  >(null);\n\n  useEffect(() => {\n    if (physicsWorkerLoaded) {\n      if (!workerRef.physicsWorker) {\n        throw new Error(`Worker missing.`);\n      }\n      setPhysicsWorker(workerRef.physicsWorker);\n    }\n  }, [physicsWorkerLoaded]);\n\n  const sendMessageToMain = useCallback(\n    (message: MessageData) => {\n      const update = {\n        type: WorkerOwnerMessageType.MESSAGE,\n        message,\n      };\n\n      worker.postMessage(update);\n    },\n    [worker]\n  );\n\n  if (!initiated || !physicsWorker) return null;\n\n  const App = app\n\n  return (\n      <App worker={worker} physicsWorker={physicsWorker} sendMessageToMain={sendMessageToMain}/>\n  )\n\n};\n\nexport { WorkerApp };\n"],"names":["WorkerMessageType","WorkerOwnerMessageType","app","worker","workerRef","proxyState","useProxy","state","initiated","physicsWorkerLoaded","useState","physicsWorker","setPhysicsWorker","useEffect","Error","sendMessageToMain","useCallback","message","postMessage","type","MESSAGE","React"],"mappings":"0EAEYA,EAYAC,iGAZZ,SAAYD,GACVA,mBACAA,mBACAA,iCACAA,2BACAA,iCACAA,2BACAA,iCACAA,uDACAA,6CATF,CAAYA,IAAAA,OAYZ,SAAYC,GACVA,qBACAA,mCACAA,iCACAA,yCACAA,qCACAA,yBACAA,6BAPF,CAAYA,IAAAA,yBCEP,gBAAGC,IAAAA,IAAKC,IAAAA,OAAeC,IAAAA,UACpBC,EAAaC,aADAC,OAEbC,EAAYH,EAAWG,UACvBC,EAAsBJ,EAAWI,sBACGC,WAExC,MAFKC,OAAeC,OAItBC,aAAU,cACJJ,EAAqB,KAClBL,EAAUO,oBACP,IAAIG,yBAEZF,EAAiBR,EAAUO,kBAE5B,CAACF,QAEEM,EAAoBC,eACxB,SAACC,GAMCd,EAAOe,YALQ,CACbC,KAAMlB,EAAuBmB,QAC7BH,QAAAA,MAKJ,CAACd,WAGEK,GAAcG,EAKfU,gBAHQnB,GAGHC,OAAQA,EAAQQ,cAAeA,EAAeI,kBAAmBA,IALjC"}