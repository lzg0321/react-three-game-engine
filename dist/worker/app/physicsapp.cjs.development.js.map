{"version":3,"file":"physicsapp.cjs.development.js","sources":["../src/main/worker/app/appContext.ts","../src/main/hooks/useWorkerMessages.ts","../src/main/worker/shared/types.ts","../src/main/worker/planckjs/collisions/collisions.ts","../src/main/worker/planckjs/bodies.ts","../src/main/worker/app/WorldState.tsx","../src/main/worker/app/Bodies.tsx","../src/main/worker/app/buffers.ts","../src/main/worker/app/World.tsx","../src/main/worker/app/logicWorker.ts","../src/main/worker/app/Collisions.tsx","../src/main/worker/app/index.tsx"],"sourcesContent":["import { createContext, MutableRefObject, useContext } from 'react';\nimport { World } from 'planck-js';\nimport { Subscribe } from '../../hooks/useWorkerMessages';\nimport { Buffers } from '../shared/types';\n\nexport type AppContextState = {\n  updateRate: number;\n  world: World;\n  worker: Worker;\n  logicWorker?: Worker | MessagePort;\n  subscribe: Subscribe;\n  logicSubscribe: Subscribe;\n  buffers: Buffers;\n  logicBuffers: Buffers;\n  buffersRef: MutableRefObject<{\n    mainCount: number;\n    logicCount: number;\n  }>;\n  maxNumberOfDynamicObjects: number;\n};\n\nexport const AppContext = createContext((null as unknown) as AppContextState);\n\nexport const useWorld = (): World => {\n  return useContext(AppContext).world;\n};\n\nexport const useAppContext = (): AppContextState => {\n  return useContext(AppContext);\n};\n","import { useCallback, useEffect, useRef } from 'react';\n\nexport type Subscribe = (callback: (event: MessageEvent) => void) => () => void;\n\nexport const useWorkerMessages = (worker: undefined | Worker | MessagePort) => {\n  const idCount = useRef(0);\n  const subscriptionsRef = useRef<{\n    [key: string]: (event: MessageEvent) => void;\n  }>({});\n\n  const subscribe = useCallback(\n    (callback: (event: MessageEvent) => void) => {\n      const id = idCount.current;\n      idCount.current += 1;\n\n      subscriptionsRef.current[id] = callback;\n\n      return () => {\n        delete subscriptionsRef.current[id];\n      };\n    },\n    [subscriptionsRef]\n  );\n\n  useEffect(() => {\n    if (!worker) return;\n    const previousOnMessage = worker.onmessage;\n    worker.onmessage = (event: MessageEvent) => {\n      Object.values(subscriptionsRef.current).forEach(callback => {\n        callback(event);\n      });\n      if (previousOnMessage) {\n        (previousOnMessage as any)(event);\n      }\n    };\n  }, [worker, subscriptionsRef]);\n\n  return subscribe;\n};\n","import { WorldDef } from 'planck-js';\n\nexport enum WorkerMessageType {\n  INIT,\n  STEP,\n  LOGIC_FRAME,\n  ADD_BODY,\n  REMOVE_BODY,\n  SET_BODY,\n  UPDATE_BODY,\n  PHYSICS_STEP_PROCESSED,\n  READY_FOR_PHYSICS,\n}\n\nexport enum WorkerOwnerMessageType {\n  FRAME,\n  PHYSICS_STEP,\n  SYNC_BODIES,\n  BEGIN_COLLISION,\n  END_COLLISION,\n  MESSAGE,\n  INITIATED,\n}\n\nexport type Buffers = {\n  positions: Float32Array;\n  angles: Float32Array;\n};\n\nexport type ValidUUID = string | number;\n\nexport type PhysicsProps = {\n  config?: {\n    maxNumberOfDynamicObjects?: number;\n    updateRate?: number;\n  };\n  worldParams?: WorldDef;\n};\n","import { Fixture } from 'planck-js';\nimport { FixtureUserData } from './types';\nimport { activeCollisionListeners } from './data';\nimport {\n  sendCollisionBeginEvent,\n  sendCollisionEndEvent,\n} from '../../functions';\n\nexport const getFixtureData = (fixture: Fixture): FixtureUserData | null => {\n  const userData = fixture.getUserData() as null | FixtureUserData;\n  return userData || null;\n};\n\nexport const getFixtureUuid = (data: FixtureUserData | null): string => {\n  if (data && data['uuid']) {\n    return data.uuid;\n  }\n  return '';\n};\n\nexport const getFixtureIndex = (data: FixtureUserData | null): number => {\n  if (data) {\n    return data.fixtureIndex;\n  }\n  return -1;\n};\n\nexport const handleBeginCollision = (fixtureA: Fixture, fixtureB: Fixture) => {\n  const aData = getFixtureData(fixtureA);\n  const bData = getFixtureData(fixtureB);\n  const aUUID = getFixtureUuid(aData);\n  const bUUID = getFixtureUuid(bData);\n\n  if (aUUID && activeCollisionListeners[aUUID]) {\n    sendCollisionBeginEvent(\n      aUUID,\n      bData,\n      getFixtureIndex(aData),\n      fixtureB.isSensor()\n    );\n  }\n\n  if (bUUID && activeCollisionListeners[bUUID]) {\n    sendCollisionBeginEvent(\n      bUUID,\n      aData,\n      getFixtureIndex(bData),\n      fixtureA.isSensor()\n    );\n  }\n};\n\nexport const handleEndCollision = (fixtureA: Fixture, fixtureB: Fixture) => {\n  const aData = getFixtureData(fixtureA);\n  const bData = getFixtureData(fixtureB);\n  const aUUID = getFixtureUuid(aData);\n  const bUUID = getFixtureUuid(bData);\n\n  if (aUUID && activeCollisionListeners[aUUID]) {\n    sendCollisionEndEvent(\n      aUUID,\n      bData,\n      getFixtureIndex(aData),\n      fixtureB.isSensor()\n    );\n  }\n\n  if (bUUID && activeCollisionListeners[bUUID]) {\n    sendCollisionEndEvent(\n      bUUID,\n      aData,\n      getFixtureIndex(bData),\n      fixtureA.isSensor()\n    );\n  }\n};\n","import {dynamicBodiesUuids, existingBodies, planckWorld} from \"./shared\";\nimport {Shape} from \"planck-js/lib/shape\";\nimport {activeCollisionListeners} from \"./collisions/data\";\nimport {addCachedBody, getCachedBody} from \"./cache\";\nimport type {BodyDef, FixtureOpt, Body, Joint} from \"planck-js\";\nimport {Box, Circle, DistanceJoint, RopeJoint, Vec2} from \"planck-js\";\nimport {ValidUUID} from \"../shared/types\";\nimport {syncBodies} from \"../shared\";\n\nexport enum BodyType {\n    static = 'static',\n    kinematic = 'kinematic',\n    dynamic = 'dynamic'\n}\n\nexport enum BodyShape {\n    box = 'box',\n    circle = 'circle',\n}\n\nexport type FixtureBase = {\n    shape: BodyShape,\n    fixtureOptions?: Partial<FixtureOpt>,\n}\n\nexport type BoxFixture = FixtureBase & {\n    hx: number,\n    hy: number,\n    center?: [number, number],\n    angle?: number,\n}\n\nexport const createBoxFixture = ({\n                                     width = 1,\n                                     height = 1,\n                                     center,\n                                        angle,\n                                     fixtureOptions = {}\n                                 }: {\n    width?: number,\n    height?: number,\n    angle?: number,\n    center?: [number, number],\n    fixtureOptions?: Partial<FixtureOpt>\n}): BoxFixture => {\n    const fixture: BoxFixture = {\n        shape: BodyShape.box,\n        hx: width,\n        hy: height,\n        fixtureOptions,\n    }\n    if (angle) {\n        fixture.angle = angle\n    }\n    if (center) {\n        fixture.center = center\n    }\n    return fixture\n}\n\nexport type CircleFixture = FixtureBase & {\n    radius: number,\n    position?: [number, number],\n}\n\nexport const createCircleFixture = ({ radius = 1, position, fixtureOptions = {} }: {\n    radius?: number,\n    position?: [number, number],\n    fixtureOptions?: Partial<FixtureOpt>\n}): CircleFixture => {\n    return {\n        shape: BodyShape.circle,\n        radius,\n        position,\n        fixtureOptions,\n    }\n}\n\ntype Fixture = BoxFixture | CircleFixture\n\ntype BasicBodyProps = Partial<BodyDef> & {\n    fixtures?: Fixture[],\n}\n\ntype AddBoxBodyProps = BasicBodyProps & {}\n\ntype AddCircleBodyProps = BasicBodyProps & {}\n\nexport type AddBodyDef = BasicBodyProps | AddBoxBodyProps | AddCircleBodyProps\n\nexport type AddBodyProps = AddBodyDef & {\n    uuid: ValidUUID,\n    listenForCollisions: boolean,\n    cacheKey?: string,\n    attachToRope?: boolean,\n}\n\nexport const addBody = ({uuid, cacheKey, listenForCollisions, fixtures = [], attachToRope = false, ...props}: AddBodyProps) => {\n\n    const existingBody = existingBodies.get(uuid)\n\n    if (existingBody) {\n        return existingBody\n    }\n\n    if (listenForCollisions) {\n        activeCollisionListeners[uuid] = true\n    }\n\n    const bodyDef: BodyDef = {\n        type: BodyType.static,\n        fixedRotation: true,\n        ...props,\n    }\n\n    const {type} = bodyDef\n\n    let body: Body | null = null;\n\n    if (cacheKey) {\n        const cachedBody = getCachedBody(cacheKey)\n        if (cachedBody) {\n\n            if (fixtures && fixtures.length > 0) {\n\n                let bodyFixture = cachedBody.getFixtureList()\n\n                fixtures.forEach((fixture, fixtureIndex) => {\n\n                    let fixtureOptions = fixture.fixtureOptions\n\n                    fixtureOptions = {\n                        userData: {\n                            uuid,\n                            fixtureIndex,\n                            ...fixtureOptions?.userData\n                        },\n                        ...fixtureOptions,\n                    }\n\n                    if (bodyFixture) {\n\n                        if (fixtureOptions) {\n                            bodyFixture.setUserData(fixtureOptions.userData)\n                        }\n\n                        bodyFixture = bodyFixture.getNext()\n                    }\n\n                })\n\n            }\n\n            const {position, angle} = props\n\n            if (position) {\n                cachedBody.setPosition(position)\n            }\n\n            if (angle) {\n                cachedBody.setAngle(angle)\n            }\n\n            cachedBody.setActive(true)\n\n            body = cachedBody\n\n        }\n    }\n\n    if (!body) {\n\n        body = planckWorld.createBody(bodyDef)\n\n        if (fixtures && fixtures.length > 0) {\n\n            fixtures.forEach((fixture, fixtureIndex) => {\n\n                const {shape} = fixture\n\n                let fixtureOptions = fixture.fixtureOptions ?? {}\n\n                fixtureOptions = {\n                    ...fixtureOptions,\n                    userData: {\n                        uuid,\n                        fixtureIndex,\n                        ...fixtureOptions?.userData\n                    },\n                }\n\n                let bodyShape: Shape;\n\n                switch (shape) {\n                    case BodyShape.box:\n                        const {hx, hy, center} = fixture as BoxFixture\n                        bodyShape = Box((hx as number) / 2, (hy as number) / 2, center ? Vec2(center[0], center[1]) : undefined) as unknown as Shape\n                        break;\n                    case BodyShape.circle:\n                        const {radius} = fixture as CircleFixture\n                        bodyShape = Circle((radius as number)) as unknown as Shape\n                        break;\n                    default:\n                        throw new Error(`Unhandled body shape ${shape}`)\n                }\n\n                if (fixtureOptions) {\n                    if (body) {\n                        body.createFixture(bodyShape, fixtureOptions as FixtureOpt)\n                    }\n                } else {\n                    if (body) {\n                        body.createFixture(bodyShape)\n                    }\n                }\n\n                // todo - handle rope properly...\n                if (attachToRope) {\n\n                    const {position, angle} = props\n\n                    const ropeJointDef = {\n                        maxLength: 0.5,\n                        localAnchorA: position,\n                        localAnchorB: position,\n                    };\n\n                    const startingBodyDef: BodyDef = {\n                        type: BodyType.static,\n                        fixedRotation: true,\n                        position,\n                        angle,\n                    }\n\n                    const startingBody = planckWorld.createBody(startingBodyDef)\n\n                    if (body) {\n\n                        const distanceJoint = DistanceJoint({\n                            collideConnected: false,\n                            frequencyHz: 5,\n                            dampingRatio: 0.5,\n                            length: 0.15,\n                        }, startingBody, body, position ?? Vec2(0, 0), position ?? Vec2(0, 0))\n\n                        const rope2 = planckWorld.createJoint(RopeJoint(ropeJointDef, startingBody, body, position ?? Vec2(0, 0)) as unknown as Joint);\n                        const rope = planckWorld.createJoint(distanceJoint as unknown as Joint);\n                    }\n\n\n                }\n\n            })\n\n\n        }\n\n    }\n\n    if (type !== BodyType.static) {\n        dynamicBodiesUuids.push(uuid)\n        syncBodies()\n    }\n\n    if (!body) {\n        throw new Error(`No body`)\n    }\n\n    existingBodies.set(uuid, body)\n\n    return body\n\n}\n\nexport type RemoveBodyProps = {\n    uuid: ValidUUID,\n    cacheKey?: string\n}\n\nconst tempVec = Vec2(0, 0)\n\nexport const removeBody = ({uuid, cacheKey}: RemoveBodyProps) => {\n    const index = dynamicBodiesUuids.indexOf(uuid)\n    if (index > -1) {\n        dynamicBodiesUuids.splice(index, 1)\n        syncBodies()\n    }\n    const body = existingBodies.get(uuid)\n    if (!body) {\n        console.warn(`Body not found for ${uuid}`)\n        return\n    }\n    existingBodies.delete(uuid)\n    if (cacheKey) {\n        tempVec.set(-1000, -1000)\n        body.setPosition(tempVec)\n        tempVec.set(0, 0)\n        body.setLinearVelocity(tempVec)\n        body.setActive(false)\n        addCachedBody(cacheKey, body)\n    } else {\n        planckWorld.destroyBody(body)\n    }\n}\n\nexport type SetBodyProps = {\n    uuid: ValidUUID,\n    method: string,\n    methodParams: any[],\n}\n\nexport const setBody = ({uuid, method, methodParams}: SetBodyProps) => {\n    const body = existingBodies.get(uuid)\n    if (!body) {\n        console.warn(`Body not found for ${uuid}`)\n        return\n    }\n    switch (method) {\n        //case 'setAngle':\n        //    const [angle] = methodParams\n        //    body.setTransform(body.getPosition(), angle)\n        //    break;\n        case 'setLinearVelocity':\n            // console.log('methodParams', methodParams[0].x, methodParams[0].y);\n            (body as any)[method](...methodParams)\n            break;\n        default:\n            (body as any)[method](...methodParams)\n    }\n}\n\nexport type UpdateBodyData = {\n    fixtureUpdate?: {\n        groupIndex?: number,\n        categoryBits?: number,\n        maskBits?: number,\n    }\n}\n\nexport type UpdateBodyProps = {\n    uuid: ValidUUID,\n    data: UpdateBodyData,\n}\n\nexport const updateBody = ({uuid, data}: UpdateBodyProps) => {\n    const body = existingBodies.get(uuid)\n    if (!body) {\n        console.warn(`Body not found for ${uuid}`)\n        return\n    }\n    const {fixtureUpdate} = data\n    if (fixtureUpdate) {\n        const fixture = body.getFixtureList()\n        if (fixture) {\n            const {\n                groupIndex,\n                categoryBits,\n                maskBits\n            } = fixtureUpdate\n            if (\n                groupIndex !== undefined || categoryBits !== undefined || maskBits !== undefined\n            ) {\n                const originalGroupIndex = fixture.getFilterGroupIndex()\n                const originalCategoryBits = fixture.getFilterCategoryBits()\n                const originalMaskBits = fixture.getFilterMaskBits()\n                fixture.setFilterData({\n                    groupIndex: groupIndex !== undefined ? groupIndex : originalGroupIndex,\n                    categoryBits: categoryBits !== undefined ? categoryBits : originalCategoryBits,\n                    maskBits: maskBits !== undefined ? maskBits : originalMaskBits,\n                })\n            }\n        }\n    }\n}\n","import React, {\n  createContext,\n  MutableRefObject,\n  useContext,\n  useRef,\n  useState,\n} from 'react';\nimport { ValidUUID } from '../shared/types';\nimport { Body } from 'planck-js';\n\ntype BodiesMap = Map<ValidUUID, Body>;\ntype DynamicBodies = Set<ValidUUID>;\ntype CollisionListeners = Set<ValidUUID>;\n\ntype ContextState = {\n  bodies: BodiesMap;\n  dynamicBodies: DynamicBodies;\n  collisionListeners: CollisionListeners;\n  bodiesNeedSync: boolean;\n  setBodiesNeedSync: (bool: boolean) => void;\n  bodiesNeedSyncRef: MutableRefObject<boolean>;\n  logicBodiesNeedSyncRef: MutableRefObject<boolean>;\n};\n\nconst Context = createContext((null as unknown) as ContextState);\n\nexport const useWorldState = (): ContextState => {\n  return useContext(Context);\n};\n\nexport const WorldState: React.FC = ({ children }) => {\n  const [bodies] = useState<BodiesMap>(() => new Map());\n  const [dynamicBodies] = useState<DynamicBodies>(() => new Set());\n  const [collisionListeners] = useState<CollisionListeners>(() => new Set());\n  const [bodiesNeedSync, setBodiesNeedSync] = useState(false);\n  const bodiesNeedSyncRef = useRef(false);\n  const logicBodiesNeedSyncRef = useRef(false);\n\n  return (\n    <Context.Provider\n      value={{\n        bodies,\n        dynamicBodies,\n        collisionListeners,\n        bodiesNeedSync,\n        setBodiesNeedSync,\n        bodiesNeedSyncRef,\n        logicBodiesNeedSyncRef,\n      }}\n    >\n      {children}\n    </Context.Provider>\n  );\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { useAppContext, useWorld } from './appContext';\nimport { ValidUUID, WorkerMessageType } from '../shared/types';\nimport {\n  Body,\n  BodyDef,\n  Box,\n  Circle,\n  DistanceJoint,\n  FixtureOpt,\n  Joint,\n  RopeJoint,\n  Vec2,\n} from 'planck-js';\nimport {\n  AddBodyProps,\n  BodyShape,\n  BodyType,\n  BoxFixture,\n  CircleFixture,\n  RemoveBodyProps,\n  SetBodyProps,\n  UpdateBodyProps,\n} from '../planckjs/bodies';\nimport { Shape } from 'planck-js/lib/shape';\nimport { useWorldState } from './WorldState';\n\nconst tempVec = Vec2(0, 0);\n\nexport const useSubscribeToWorkerMessages = (\n  messageHandler: (event: MessageEvent) => void\n) => {\n  const { subscribe, logicSubscribe } = useAppContext();\n\n  useEffect(() => {\n    const unsubscribe = subscribe(messageHandler);\n\n    const unsubscribeLogic = logicSubscribe(messageHandler);\n\n    return () => {\n      unsubscribe();\n      unsubscribeLogic();\n    };\n  }, [subscribe, logicSubscribe, messageHandler]);\n};\n\ntype BodiesMap = Map<ValidUUID, Body>;\ntype CachedBodiesMap = Map<string, Body[]>;\n\nconst applyBodyConfigToExistingBody = (\n  body: Body,\n  data: AddBodyProps\n): Body => {\n  const {\n    uuid,\n    cacheKey,\n    listenForCollisions,\n    fixtures = [],\n    attachToRope = false,\n    ...props\n  } = data;\n\n  if (fixtures && fixtures.length > 0) {\n    let bodyFixture = body.getFixtureList();\n\n    fixtures.forEach((fixture, fixtureIndex) => {\n      let fixtureOptions = fixture.fixtureOptions;\n\n      fixtureOptions = {\n        userData: {\n          uuid,\n          fixtureIndex,\n          ...fixtureOptions?.userData,\n        },\n        ...fixtureOptions,\n      };\n\n      if (bodyFixture) {\n        if (fixtureOptions) {\n          bodyFixture.setUserData(fixtureOptions.userData);\n        }\n\n        bodyFixture = bodyFixture.getNext();\n      }\n    });\n  }\n\n  const { position, angle } = props;\n\n  if (position) {\n    body.setPosition(position);\n  }\n\n  if (angle) {\n    body.setAngle(angle);\n  }\n\n  body.setActive(true);\n\n  return body;\n};\n\nconst useAddBody = (bodies: BodiesMap, cachedBodies: CachedBodiesMap) => {\n  const {\n    dynamicBodies,\n    collisionListeners,\n    bodiesNeedSyncRef,\n    logicBodiesNeedSyncRef,\n  } = useWorldState();\n\n  const addDynamicBody = useCallback(\n    (uuid: ValidUUID) => {\n      dynamicBodies.add(uuid);\n      bodiesNeedSyncRef.current = true;\n      logicBodiesNeedSyncRef.current = true;\n    },\n    [dynamicBodies, bodiesNeedSyncRef, logicBodiesNeedSyncRef]\n  );\n\n  const addCollisionListeners = useCallback(\n    (uuid: ValidUUID) => {\n      collisionListeners.add(uuid);\n    },\n    [collisionListeners]\n  );\n\n  const world = useWorld();\n\n  const getCachedBody = useCallback(\n    (cacheKey: string) => {\n      const cached = cachedBodies.get(cacheKey);\n\n      if (cached && cached.length > 0) {\n        const body = cached.pop();\n        if (body) {\n          return body;\n        }\n      }\n\n      return null;\n    },\n    [cachedBodies]\n  );\n\n  return useCallback(\n    (data: AddBodyProps) => {\n      const {\n        uuid,\n        cacheKey,\n        listenForCollisions,\n        fixtures = [],\n        attachToRope = false,\n        ...props\n      } = data;\n\n      const existingBody = bodies.get(uuid);\n\n      if (existingBody) {\n        return existingBody;\n      }\n\n      if (listenForCollisions) {\n        addCollisionListeners(uuid);\n      }\n\n      const bodyDef: BodyDef = {\n        type: BodyType.static,\n        fixedRotation: true,\n        ...props,\n      };\n\n      const { type } = bodyDef;\n\n      let body: Body | null = null;\n\n      if (cacheKey) {\n        let cachedBody = getCachedBody(cacheKey);\n\n        if (cachedBody) {\n          body = applyBodyConfigToExistingBody(cachedBody, data);\n        }\n      }\n\n      if (!body) {\n        body = world.createBody(bodyDef);\n\n        if (fixtures && fixtures.length > 0) {\n          fixtures.forEach((fixture, fixtureIndex) => {\n            const { shape } = fixture;\n\n            let fixtureOptions = fixture.fixtureOptions ?? {};\n\n            fixtureOptions = {\n              ...fixtureOptions,\n              userData: {\n                uuid,\n                fixtureIndex,\n                ...fixtureOptions?.userData,\n              },\n            };\n\n            let bodyShape: Shape;\n\n            switch (shape) {\n              case BodyShape.box:\n                const { hx, hy, center, angle } = fixture as BoxFixture;\n                bodyShape = (Box(\n                  (hx as number) / 2,\n                  (hy as number) / 2,\n                  center ? Vec2(center[0], center[1]) : undefined,\n                    angle,\n                ) as unknown) as Shape;\n                break;\n              case BodyShape.circle:\n                const { radius, position } = fixture as CircleFixture;\n                if (position) {\n                  bodyShape = (Circle(Vec2(position[0], position[1]), radius as number) as unknown) as Shape;\n                } else {\n                  bodyShape = (Circle(radius as number) as unknown) as Shape;\n                }\n                break;\n              default:\n                throw new Error(`Unhandled body shape ${shape}`);\n            }\n\n            if (fixtureOptions) {\n              if (body) {\n                body.createFixture(bodyShape, fixtureOptions as FixtureOpt);\n              }\n            } else {\n              if (body) {\n                body.createFixture(bodyShape);\n              }\n            }\n\n            // todo - handle rope properly...\n            if (attachToRope) {\n              const { position, angle } = props;\n\n              const ropeJointDef = {\n                maxLength: 0.5,\n                localAnchorA: position,\n                localAnchorB: position,\n              };\n\n              const startingBodyDef: BodyDef = {\n                type: BodyType.static,\n                fixedRotation: true,\n                position,\n                angle,\n              };\n\n              const startingBody = world.createBody(startingBodyDef);\n\n              if (body) {\n                const distanceJoint = DistanceJoint(\n                  {\n                    collideConnected: false,\n                    frequencyHz: 5,\n                    dampingRatio: 0.5,\n                    length: 0.15,\n                  },\n                  startingBody,\n                  body,\n                  position ?? Vec2(0, 0),\n                  position ?? Vec2(0, 0)\n                );\n\n                const rope2 = world.createJoint(\n                  (RopeJoint(\n                    ropeJointDef,\n                    startingBody,\n                    body,\n                    position ?? Vec2(0, 0)\n                  ) as unknown) as Joint\n                );\n                const rope = world.createJoint(\n                  (distanceJoint as unknown) as Joint\n                );\n              }\n            }\n          });\n        }\n      }\n\n      if (type !== BodyType.static) {\n        addDynamicBody(uuid);\n      }\n\n      if (!body) {\n        throw new Error(`No body`);\n      }\n\n      bodies.set(uuid, body);\n\n      return body;\n    },\n    [world, bodies, getCachedBody, addDynamicBody, addCollisionListeners]\n  );\n};\n\nconst useRemoveBody = (bodies: BodiesMap, cachedBodies: CachedBodiesMap) => {\n  const world = useWorld();\n  const {\n    dynamicBodies,\n    collisionListeners,\n    bodiesNeedSyncRef,\n    logicBodiesNeedSyncRef,\n  } = useWorldState();\n\n  return useCallback(\n    ({ uuid, cacheKey }: RemoveBodyProps) => {\n      if (dynamicBodies.has(uuid)) {\n        dynamicBodies.delete(uuid);\n        bodiesNeedSyncRef.current = true;\n        logicBodiesNeedSyncRef.current = true;\n      }\n\n      collisionListeners.delete(uuid);\n\n      const body = bodies.get(uuid);\n\n      if (!body) {\n        console.warn(`Body not found for ${uuid}`);\n        return;\n      }\n\n      bodies.delete(uuid);\n\n      if (cacheKey) {\n        tempVec.set(-1000, -1000);\n        body.setPosition(tempVec);\n        tempVec.set(0, 0);\n        body.setLinearVelocity(tempVec);\n        body.setActive(false);\n        const cached = cachedBodies.get(cacheKey);\n        if (cached) {\n          cached.push(body);\n        } else {\n          cachedBodies.set(cacheKey, [body]);\n        }\n      } else {\n        world.destroyBody(body);\n      }\n    },\n    [\n      world,\n      bodies,\n      dynamicBodies,\n      collisionListeners,\n      bodiesNeedSyncRef,\n      logicBodiesNeedSyncRef,\n      cachedBodies,\n    ]\n  );\n};\n\nconst useSetBody = (bodies: BodiesMap) => {\n  return useCallback(\n    ({ uuid, method, methodParams }: SetBodyProps) => {\n      const body = bodies.get(uuid);\n      if (!body) {\n        console.warn(`Body not found for ${uuid}`, bodies);\n        return;\n      }\n      switch (method) {\n        default:\n          (body as any)[method](...methodParams);\n      }\n    },\n    [bodies]\n  );\n};\n\nconst useUpdateBody = (bodies: BodiesMap) => {\n  return useCallback(\n    ({ uuid, data }: UpdateBodyProps) => {\n      const body = bodies.get(uuid);\n      if (!body) {\n        console.warn(`Body not found for ${uuid}`);\n        return;\n      }\n      const { fixtureUpdate } = data;\n      if (fixtureUpdate) {\n        const fixture = body.getFixtureList();\n        if (fixture) {\n          const { groupIndex, categoryBits, maskBits } = fixtureUpdate;\n          if (\n            groupIndex !== undefined ||\n            categoryBits !== undefined ||\n            maskBits !== undefined\n          ) {\n            const originalGroupIndex = fixture.getFilterGroupIndex();\n            const originalCategoryBits = fixture.getFilterCategoryBits();\n            const originalMaskBits = fixture.getFilterMaskBits();\n            fixture.setFilterData({\n              groupIndex:\n                groupIndex !== undefined ? groupIndex : originalGroupIndex,\n              categoryBits:\n                categoryBits !== undefined\n                  ? categoryBits\n                  : originalCategoryBits,\n              maskBits: maskBits !== undefined ? maskBits : originalMaskBits,\n            });\n          }\n        }\n      }\n    },\n    [bodies]\n  );\n};\n\nexport const Bodies: React.FC = () => {\n  const { bodies } = useWorldState();\n  const [cachedBodies] = useState<CachedBodiesMap>(() => new Map());\n\n  const addBody = useAddBody(bodies, cachedBodies);\n  const removeBody = useRemoveBody(bodies, cachedBodies);\n  const setBody = useSetBody(bodies);\n  const updateBody = useUpdateBody(bodies);\n\n  const onMessage = useCallback(\n    (event: MessageEvent) => {\n      const { type, props = {} } = event.data as {\n        type: WorkerMessageType;\n        props: any;\n      };\n      switch (type) {\n        case WorkerMessageType.ADD_BODY:\n          addBody(props);\n          break;\n        case WorkerMessageType.REMOVE_BODY:\n          removeBody(props);\n          break;\n        case WorkerMessageType.SET_BODY:\n          setBody(props);\n          break;\n        case WorkerMessageType.UPDATE_BODY:\n          updateBody(props);\n          break;\n      }\n    },\n    [addBody, removeBody, setBody, updateBody]\n  );\n\n  useSubscribeToWorkerMessages(onMessage);\n\n  return null;\n};\n","import {useEffect, useRef, useState} from 'react';\nimport { Buffers } from '../shared/types';\nimport { useDidMount } from '../../../utils/hooks';\n\nexport const generateBuffers = (maxNumberOfDynamicObjects: number): Buffers => {\n  return {\n    positions: new Float32Array(maxNumberOfDynamicObjects * 2),\n    angles: new Float32Array(maxNumberOfDynamicObjects),\n  };\n};\n\nexport const useBuffers = (maxNumberOfDynamicObjects: number, debug: string): Buffers => {\n  const isMountRef = useRef(true)\n  const [buffers] = useState(() => generateBuffers(maxNumberOfDynamicObjects));\n\n  useEffect(() => {\n    if (isMountRef.current) {\n      isMountRef.current = false\n      return\n    }\n    const { positions, angles } = generateBuffers(maxNumberOfDynamicObjects);\n    buffers.positions = positions;\n    buffers.angles = angles;\n  }, [maxNumberOfDynamicObjects]);\n\n  return buffers;\n};\n","import React, {MutableRefObject, useCallback, useEffect, useRef, useState} from 'react';\nimport {useAppContext, useWorld} from './appContext';\nimport {Buffers, WorkerMessageType, WorkerOwnerMessageType,} from '../shared/types';\nimport {useWorldState} from './WorldState';\nimport {generateBuffers} from \"./buffers\";\n\nconst useSyncData = () => {\n  const { dynamicBodies, bodies } = useWorldState();\n  return useCallback((positions: Float32Array, angles: Float32Array) => {\n    const dynamicBodiesArray = Array.from(dynamicBodies);\n\n    dynamicBodiesArray.forEach((uuid, index) => {\n      const body = bodies.get(uuid);\n      if (!body) return;\n      const position = body.getPosition();\n      const angle = body.getAngle();\n      positions[2 * index + 0] = position.x;\n      positions[2 * index + 1] = position.y;\n      angles[index] = angle;\n    });\n  }, []);\n};\n\nconst debug = {\n  mainSent: false,\n  mainLogged: false,\n  mainLogged2: false,\n  logicSent: false,\n  logicLogged: false,\n  logicLogged2: false,\n};\n\nconst useSendPhysicsUpdate = (tickRef: MutableRefObject<number>) => {\n\n  const localStateRef = useRef({\n    failedMainCount: 0,\n    failedLogicCount: 0,\n    lastPhysicsStep: 0,\n  })\n\n  const {\n    bodiesNeedSyncRef,\n    logicBodiesNeedSyncRef,\n    dynamicBodies,\n  } = useWorldState();\n\n  const {\n    buffers: mainBuffers,\n    logicBuffers,\n    worker,\n    logicWorker,\n    maxNumberOfDynamicObjects,\n  } = useAppContext();\n\n  const syncData = useSyncData();\n\n  return useCallback(\n    (target: Worker | MessagePort, buffer: Buffers, isMain: boolean) => {\n      const { positions, angles } = buffer;\n      if (!(positions.byteLength !== 0 && angles.byteLength !== 0)) {\n        console.warn('cant send physics update to', isMain ? 'main' : 'logic')\n        if (isMain) {\n          if (localStateRef.current.failedMainCount >= 2) {\n            const { positions: newPositions, angles: newAngles } = generateBuffers(maxNumberOfDynamicObjects);\n            mainBuffers.positions = newPositions\n            mainBuffers.angles = newAngles\n          }\n        } else {\n          if (localStateRef.current.failedLogicCount >= 2) {\n            const {positions: newPositions, angles: newAngles} = generateBuffers(maxNumberOfDynamicObjects);\n            logicBuffers.positions = newPositions\n            logicBuffers.angles = newAngles\n          }\n        }\n        if (isMain) {\n          localStateRef.current.failedMainCount += 1\n        } else {\n          localStateRef.current.failedLogicCount += 1\n        }\n        return;\n      }\n      if (isMain) {\n        localStateRef.current.failedMainCount = 0\n      } else {\n        localStateRef.current.failedLogicCount = 0\n      }\n      syncData(positions, angles);\n      const rawMessage: any = {\n        type: WorkerOwnerMessageType.PHYSICS_STEP,\n        physicsTick: tickRef.current,\n      };\n      if (isMain) {\n        rawMessage.bodies = Array.from(dynamicBodies);\n        bodiesNeedSyncRef.current = false;\n      } else {\n        rawMessage.bodies = Array.from(dynamicBodies);\n        logicBodiesNeedSyncRef.current = false;\n      }\n      const message = {\n        ...rawMessage,\n        positions,\n        angles,\n      };\n      target.postMessage(message, [positions.buffer, angles.buffer]);\n    },\n    [bodiesNeedSyncRef, logicBodiesNeedSyncRef, tickRef, syncData]\n  );\n};\n\nconst useSendPhysicsUpdates = (tickRef: MutableRefObject<number>) => {\n  const {\n    buffers: mainBuffers,\n    logicBuffers,\n    worker,\n    logicWorker,\n  } = useAppContext();\n\n  const sendPhysicsUpdate = useSendPhysicsUpdate(tickRef);\n\n  const update = useCallback((isMain: boolean) => {\n    if (isMain) {\n      sendPhysicsUpdate(worker, mainBuffers, true);\n    } else if (logicWorker) {\n      sendPhysicsUpdate(logicWorker, logicBuffers, false);\n    }\n  }, [worker, logicWorker, sendPhysicsUpdate, mainBuffers, logicBuffers]);\n\n  const updateRef = useRef(update);\n\n  useEffect(() => {\n    updateRef.current = update;\n  }, [update, updateRef]);\n\n  return useCallback((isMain: boolean) => {\n    // using ref, as i don't want to interrupt the interval\n    updateRef.current(isMain);\n  }, [updateRef]);\n};\n\nconst useStepProcessed = (tickRef: MutableRefObject<number>) => {\n  const {\n    buffers: mainBuffers,\n    logicBuffers,\n    worker,\n    logicWorker,\n    buffersRef,\n  } = useAppContext();\n\n  return useCallback(\n    (\n      isMain: boolean,\n      lastProcessedPhysicsTick: number,\n      positions: Float32Array,\n      angles: Float32Array\n    ) => {\n      const buffers = isMain ? mainBuffers : logicBuffers;\n\n      if (isMain) {\n        buffers.positions = positions;\n        buffers.angles = angles;\n      } else {\n        buffers.positions = positions;\n        buffers.angles = angles;\n      }\n    },\n    [mainBuffers, logicBuffers, tickRef, worker, logicWorker]\n  );\n};\n\nconst useWorldLoop = () => {\n  const world = useWorld();\n  const { updateRate, subscribe, logicSubscribe } = useAppContext();\n  const tickRef = useRef(0);\n  const [tickCount, setTickCount] = useState(0)\n\n  const lastSentMainUpdateRef = useRef(-1)\n  const lastSentLogicUpdateRef = useRef(-1)\n  const [mainBufferReady, setMainBufferReady] = useState(false)\n  const [logicBufferReady, setLogicBufferReady] = useState(false)\n  const sendPhysicsUpdate = useSendPhysicsUpdates(tickRef);\n\n  useEffect(() => {\n\n    if (mainBufferReady && lastSentMainUpdateRef.current < tickCount) {\n      sendPhysicsUpdate(true)\n      lastSentMainUpdateRef.current = tickCount\n      setMainBufferReady(false)\n    }\n\n  }, [tickCount, mainBufferReady])\n\n  useEffect(() => {\n\n    if (logicBufferReady && lastSentLogicUpdateRef.current < tickCount) {\n      sendPhysicsUpdate(false)\n      lastSentLogicUpdateRef.current = tickCount\n      setLogicBufferReady(false)\n    }\n\n  }, [tickCount, logicBufferReady])\n\n  useEffect(() => {\n\n    const step = () => {\n      world.step(updateRate);\n    };\n\n    const interval = setInterval(() => {\n      tickRef.current += 1;\n      setTickCount(state => state + 1)\n      step();\n    }, updateRate);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, []);\n\n  const stepProcessed = useStepProcessed(tickRef);\n\n  useEffect(() => {\n\n    const onMessage = (event: MessageEvent, isMain: boolean = true) => {\n      const { type, props = {} } = event.data as {\n        type: WorkerMessageType;\n        props: any;\n      };\n      if (type === WorkerMessageType.READY_FOR_PHYSICS) {\n        if (isMain) {\n          setMainBufferReady(true)\n        } else {\n          setLogicBufferReady(true)\n        }\n      } else if (type === WorkerMessageType.PHYSICS_STEP_PROCESSED) {\n        stepProcessed(\n          isMain,\n          event.data.physicsTick,\n          event.data.positions,\n          event.data.angles\n        );\n        if (isMain) {\n          setMainBufferReady(true)\n        } else {\n          setLogicBufferReady(true)\n        }\n      }\n    };\n\n    const unsubscribe = subscribe(onMessage);\n\n    const unsubscribeLogic = logicSubscribe(event => onMessage(event, false));\n\n    return () => {\n      unsubscribe();\n      unsubscribeLogic();\n    };\n  }, [subscribe, logicSubscribe, stepProcessed]);\n};\n\nexport const World: React.FC = () => {\n  useWorldLoop();\n  return null;\n};\n","import { Subscribe, useWorkerMessages } from '../../hooks/useWorkerMessages';\nimport { useEffect, useState } from 'react';\n\nexport const useSubscribeLogicWorker = (\n  worker: Worker | MessagePort | undefined\n) => {\n  const subscribe = useWorkerMessages(worker);\n  return subscribe;\n};\n\nexport const useLogicWorker = (\n  worker: Worker,\n  subscribe: Subscribe\n): undefined | Worker | MessagePort => {\n  const [logicWorker, setLogicWorker] = useState<MessagePort>();\n\n  useEffect(() => {\n    let logicWorkerPort: MessagePort;\n\n    const handleMessage = (event: MessageEvent) => {\n      if (event.data.command === 'connect') {\n        logicWorkerPort = event.ports[0];\n        setLogicWorker(logicWorkerPort);\n        return;\n      } else if (event.data.command === 'forward') {\n        logicWorkerPort.postMessage(event.data.message);\n        return;\n      }\n    };\n\n    const unsubscribe = subscribe(event => {\n      if (event.data.command) {\n        handleMessage(event);\n      }\n    });\n\n    return () => {\n      unsubscribe();\n    };\n  }, [worker, subscribe, setLogicWorker]);\n\n  return logicWorker;\n};\n","import React, { useCallback, useEffect } from 'react';\nimport { useAppContext, useWorld } from './appContext';\nimport { Contact, Fixture } from 'planck-js';\nimport {\n  getFixtureData,\n  getFixtureIndex,\n  getFixtureUuid,\n} from '../planckjs/collisions/collisions';\nimport { useWorldState } from './WorldState';\nimport { WorkerOwnerMessageType } from '../shared/types';\n\nconst useHandleBeginCollision = () => {\n  const { worker, logicWorker } = useAppContext();\n  const { collisionListeners } = useWorldState();\n  const sendCollisionBeginEvent = useCallback(\n    (uuid: string, data: any, fixtureIndex: number, collidedFixtureIndex: number, isSensor: boolean) => {\n      const update = {\n        type: WorkerOwnerMessageType.BEGIN_COLLISION,\n        props: {\n          uuid,\n          data,\n          fixtureIndex,\n        collidedFixtureIndex,\n          isSensor,\n        },\n      };\n      worker.postMessage(update);\n      if (logicWorker) {\n        logicWorker.postMessage(update);\n      }\n    },\n    [worker, logicWorker]\n  );\n\n  return useCallback(\n    (fixtureA: Fixture, fixtureB: Fixture) => {\n      const aData = getFixtureData(fixtureA);\n      const bData = getFixtureData(fixtureB);\n      const aUUID = getFixtureUuid(aData);\n      const bUUID = getFixtureUuid(bData);\n\n      if (aUUID && collisionListeners.has(aUUID)) {\n        sendCollisionBeginEvent(\n          aUUID,\n          bData,\n          getFixtureIndex(aData),\n          getFixtureIndex(bData),\n          fixtureB.isSensor()\n        );\n      }\n\n      if (bUUID && collisionListeners.has(bUUID)) {\n        sendCollisionBeginEvent(\n          bUUID,\n          aData,\n          getFixtureIndex(bData),\n          getFixtureIndex(aData),\n          fixtureA.isSensor()\n        );\n      }\n    },\n    [collisionListeners, sendCollisionBeginEvent]\n  );\n};\n\nconst useHandleEndCollision = () => {\n  const { worker, logicWorker } = useAppContext();\n  const { collisionListeners } = useWorldState();\n\n  const sendCollisionEndEvent = useCallback(\n    (uuid: string, data: any, fixtureIndex: number, collidedFixtureIndex: number, isSensor: boolean) => {\n      const update = {\n        type: WorkerOwnerMessageType.END_COLLISION,\n        props: {\n          uuid,\n          data,\n          fixtureIndex,\n            collidedFixtureIndex,\n          isSensor,\n        },\n      };\n      worker.postMessage(update);\n      if (logicWorker) {\n        logicWorker.postMessage(update);\n      }\n    },\n    [worker, logicWorker]\n  );\n\n  return useCallback(\n    (fixtureA: Fixture, fixtureB: Fixture) => {\n      const aData = getFixtureData(fixtureA);\n      const bData = getFixtureData(fixtureB);\n      const aUUID = getFixtureUuid(aData);\n      const bUUID = getFixtureUuid(bData);\n\n      if (aUUID && collisionListeners.has(aUUID)) {\n        sendCollisionEndEvent(\n          aUUID,\n          bData,\n          getFixtureIndex(aData),\n          getFixtureIndex(bData),\n          fixtureB.isSensor()\n        );\n      }\n\n      if (bUUID && collisionListeners.has(bUUID)) {\n        sendCollisionEndEvent(\n          bUUID,\n          aData,\n          getFixtureIndex(bData),\n          getFixtureIndex(aData),\n          fixtureA.isSensor()\n        );\n      }\n    },\n    [collisionListeners, sendCollisionEndEvent]\n  );\n};\n\nexport const Collisions: React.FC = () => {\n  const world = useWorld();\n\n  const handleBeginCollision = useHandleBeginCollision();\n  const handleEndCollision = useHandleEndCollision();\n\n  useEffect(() => {\n    world.on('begin-contact', (contact: Contact) => {\n      const fixtureA = contact.getFixtureA();\n      const fixtureB = contact.getFixtureB();\n      handleBeginCollision(fixtureA, fixtureB);\n    });\n\n    world.on('end-contact', (contact: Contact) => {\n      const fixtureA = contact.getFixtureA();\n      const fixtureB = contact.getFixtureB();\n      handleEndCollision(fixtureA, fixtureB);\n    });\n  }, [world]);\n\n  return null;\n};\n","import React, { useEffect, useRef, useState } from 'react';\nimport { Vec2, World, WorldDef } from 'planck-js';\nimport { AppContext } from './appContext';\nimport { useWorkerMessages } from '../../hooks/useWorkerMessages';\nimport { Bodies } from './Bodies';\nimport { World as WorldComponent } from './World';\nimport { useSubscribeLogicWorker, useLogicWorker } from './logicWorker';\nimport { WorldState } from './WorldState';\nimport { Collisions } from './Collisions';\nimport { WorkerOwnerMessageType } from '../shared/types';\nimport { useBuffers } from './buffers';\n\nexport const App: React.FC<{\n  config: {\n    maxNumberOfDynamicObjects: number;\n    updateRate: number;\n  };\n  worldParams: WorldDef;\n  worker: Worker;\n}> = ({ worldParams, worker, config }) => {\n  const { updateRate, maxNumberOfDynamicObjects } = config;\n\n  const defaultParams = {\n    allowSleep: true,\n    gravity: Vec2(0, 0),\n    ...worldParams,\n  };\n\n  const [world] = useState(() => World(defaultParams));\n\n  const subscribe = useWorkerMessages(worker);\n\n  const logicWorker = useLogicWorker(worker, subscribe);\n\n  const logicSubscribe = useSubscribeLogicWorker(logicWorker);\n\n  const buffers = useBuffers(maxNumberOfDynamicObjects, 'main');\n  const logicBuffers = useBuffers(!logicWorker ? 0 : maxNumberOfDynamicObjects, 'logic');\n\n  const buffersRef = useRef({\n    mainCount: 0,\n    logicCount: 0,\n  });\n\n  useEffect(() => {\n    worker.postMessage({\n      type: WorkerOwnerMessageType.INITIATED,\n    });\n  }, [worker]);\n\n  return (\n    <AppContext.Provider\n      value={{\n        world,\n        updateRate,\n        worker,\n        logicWorker,\n        subscribe,\n        logicSubscribe,\n        buffers,\n        logicBuffers,\n        buffersRef,\n        maxNumberOfDynamicObjects,\n      }}\n    >\n      <WorldState>\n        <WorldComponent />\n        <Bodies />\n        <Collisions />\n      </WorldState>\n    </AppContext.Provider>\n  );\n};\n"],"names":["AppContext","createContext","useWorld","useContext","world","useAppContext","useWorkerMessages","worker","idCount","useRef","subscriptionsRef","subscribe","useCallback","callback","id","current","useEffect","previousOnMessage","onmessage","event","Object","values","forEach","WorkerMessageType","WorkerOwnerMessageType","getFixtureData","fixture","userData","getUserData","getFixtureUuid","data","uuid","getFixtureIndex","fixtureIndex","BodyType","BodyShape","Context","useWorldState","WorldState","children","useState","Map","bodies","Set","dynamicBodies","collisionListeners","bodiesNeedSync","setBodiesNeedSync","bodiesNeedSyncRef","logicBodiesNeedSyncRef","React","Provider","value","tempVec","Vec2","useSubscribeToWorkerMessages","messageHandler","logicSubscribe","unsubscribe","unsubscribeLogic","applyBodyConfigToExistingBody","body","cacheKey","fixtures","props","length","bodyFixture","getFixtureList","fixtureOptions","setUserData","getNext","position","angle","setPosition","setAngle","setActive","useAddBody","cachedBodies","addDynamicBody","add","addCollisionListeners","getCachedBody","cached","get","pop","listenForCollisions","attachToRope","existingBody","bodyDef","type","fixedRotation","cachedBody","createBody","shape","bodyShape","box","hx","hy","center","Box","undefined","circle","radius","Circle","Error","createFixture","ropeJointDef","maxLength","localAnchorA","localAnchorB","startingBodyDef","startingBody","distanceJoint","DistanceJoint","collideConnected","frequencyHz","dampingRatio","rope2","createJoint","RopeJoint","rope","set","useRemoveBody","has","console","warn","setLinearVelocity","push","destroyBody","useSetBody","method","methodParams","useUpdateBody","fixtureUpdate","groupIndex","categoryBits","maskBits","originalGroupIndex","getFilterGroupIndex","originalCategoryBits","getFilterCategoryBits","originalMaskBits","getFilterMaskBits","setFilterData","Bodies","addBody","removeBody","setBody","updateBody","onMessage","ADD_BODY","REMOVE_BODY","SET_BODY","UPDATE_BODY","generateBuffers","maxNumberOfDynamicObjects","positions","Float32Array","angles","useBuffers","debug","isMountRef","buffers","useSyncData","dynamicBodiesArray","Array","from","index","getPosition","getAngle","x","y","useSendPhysicsUpdate","tickRef","localStateRef","failedMainCount","failedLogicCount","lastPhysicsStep","mainBuffers","logicBuffers","syncData","target","buffer","isMain","byteLength","newPositions","newAngles","rawMessage","PHYSICS_STEP","physicsTick","message","postMessage","useSendPhysicsUpdates","logicWorker","sendPhysicsUpdate","update","updateRef","useStepProcessed","lastProcessedPhysicsTick","useWorldLoop","updateRate","tickCount","setTickCount","lastSentMainUpdateRef","lastSentLogicUpdateRef","mainBufferReady","setMainBufferReady","logicBufferReady","setLogicBufferReady","step","interval","setInterval","state","clearInterval","stepProcessed","READY_FOR_PHYSICS","PHYSICS_STEP_PROCESSED","World","useSubscribeLogicWorker","useLogicWorker","setLogicWorker","logicWorkerPort","handleMessage","command","ports","useHandleBeginCollision","sendCollisionBeginEvent","collidedFixtureIndex","isSensor","BEGIN_COLLISION","fixtureA","fixtureB","aData","bData","aUUID","bUUID","useHandleEndCollision","sendCollisionEndEvent","END_COLLISION","Collisions","handleBeginCollision","handleEndCollision","on","contact","getFixtureA","getFixtureB","App","worldParams","config","defaultParams","allowSleep","gravity","buffersRef","mainCount","logicCount","INITIATED","WorldComponent"],"mappings":"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"}